//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/api/events/RecurrenceDetails.java
//

#ifndef _RecurrenceDetails_H_
#define _RecurrenceDetails_H_

#import "NSArray+JavaAPI.h"
@class RecurrenceDetails_RecurrenceDetailsBuilder;
@class RecurrenceType;
#import "JBArrayList.h"
#import "JBHashtable.h"

#import "JB.h"
#include "IMappable.h"

/**
 @brief Created by slevin on 29/07/2015.
 Class represents a Recurrent Rule.
 */
@interface RecurrenceDetails : NSObject < IMappable > {
 @public
  long64 endTime_;
  int numberOfOccurrences_;
  boolean noEndDate_;
  RecurrenceType *recurrenceType_;
  int recurInterval_;
  ArrayList* daysOfWeek_;
  int dayOfMonth_;
  int monthOfYear_;
}

/**
 @brief for json use only!!!!!
 */
- (instancetype)init;

- (instancetype)initWithRecurrenceDetails_RecurrenceDetailsBuilder:(RecurrenceDetails_RecurrenceDetailsBuilder *)builder;

/**
 @return epoch time by which the recurrent rule ends or -1 if not defined.
 */
- (long64)getEndTime;

/**
 @return number of occurrences defined for the recurrent rule or -1 if not defined.
 */
- (int)getNumberOfOccurrences;

/**
 @return true if the rule is defined forever. false otherwise
 */
- (boolean)isNoEndDate;

/**
 @return the type of the recurrent rule. RecurrenceType
 */
- (RecurrenceType *)getRecurrenceType;

/**
 @return number represents intervals the recurrence rule repeats. <br> for example 1 - every day for a DAILY rule, every week for a WEEKLY rule etc. <br> 2 - every second day for a DAILY rule, every two weeks for a WEEKLY rule etc
 */
- (int)getRecurInterval;

/**
 @return for WEEKLY recurrent type returns a list of days in which the rule apply or empty list if not defined <BR> example: [2,5] represents MONDAY and THURSDAY according to java Date convention. java.util.Calendar
 */
- (ArrayList*)getDaysOfWeek;

/**
 @return for MONTHLY and YEARLY recurrent type returns the day of month in which the rule apply or -1 if not define <BR> example: 3 means every 3rd of the month
 */
- (int)getDayOfMonth;

/**
 @return for YEARLY recurrent type returns the month of the year in which the rule apply, or -1 if not defined. <BR> values are: {0-11} according to java Date convention. java.util.Calendar
 */
- (int)getMonthOfYear;

- (boolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)initObjectFromMapWithJavaUtilMap:(HashMap*)map OBJC_METHOD_FAMILY_NONE;

- (HashMap*)objectToMap;

- (NSString *)description;

- (void)copyAllFieldsTo:(RecurrenceDetails *)other;

@end

__attribute__((always_inline)) inline void RecurrenceDetails_init() {}

//J2OBJC_FIELD_SETTER(RecurrenceDetails, recurrenceType_, RecurrenceType *)
//J2OBJC_FIELD_SETTER(RecurrenceDetails, daysOfWeek_, ArrayList*)

typedef RecurrenceDetails ComIntelWearablePlatformTimeiqApiEventsRecurrenceDetails;

@interface RecurrenceDetails_RecurrenceDetailsBuilder : NSObject {
 @public
  long64 endTime__;
  int numberOfOccurrences__;
  boolean noEndDate__;
  RecurrenceType *recurrenceType_;
  int recurInterval__;
  ArrayList* daysOfWeek__;
  int dayOfMonth__;
  int monthOfYear__;
}

/**
 @param recurrenceType  RecurrenceType
 */
- (instancetype)initWithRecurrenceType:(RecurrenceType *)recurrenceType;

- (instancetype)initWithRecurrenceDetails:(RecurrenceDetails *)details;

/**
 @param noEndDate - indicator for recurrent rule to run forever.
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)noEndDateWithBoolean:(boolean)noEndDate;

/**
 @param recurInterval - number represents intervals the recurrence rule repeats. <br> for example 1 - every day for a DAILY rule, every week for a WEEKLY rule etc. <br> 2 - every second day for a DAILY rule, every two weeks for a WEEKLY rule etc
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)recurIntervalWithInt:(int)recurInterval;

/**
 @brief Used only in WEEKLY recurrent type
 @param days: a list of days in which the rule apply. for example [2,5] represents MONDAY and THURSDAY according to java Date convention. java.util.Calendar
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)daysOfWeekWithIntegerArray:(Array *)days;

/**
 @brief Used only in MONTHLY and YEARLY recurrent types
 @param dayInMonth: day of month in which the rule apply. for example 3 means every 3rd of the month
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)dayOfMonthWithInt:(int)dayInMonth;

/**
 @brief Used only in YEARLY recurrent type
 @param monthOfYear: the month of the year in which the rule apply. [0-11] according to java Date convention. java.util.Calendar
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)monthOfYearWithInt:(int)monthOfYear;

/**
 @param endTime: epoch time that bounds the recurrence rule
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)endTimeWithLong:(long64)endTime;

/**
 @param numberOfOccurrences -  number of recurrent instances to create.
 */
- (RecurrenceDetails_RecurrenceDetailsBuilder *)numberOfOccurrencesWithInt:(int)numberOfOccurrences;

/**
 @brief NOTE: <BR> 1) only one of 'endTime' , 'numberOfOccurrences' and 'noEndDate' should be set.
 <BR> 2) 'daysOfWeek' should be set only for recurrenceType == WEEKLY <BR> 3) 'dayOfMonth' should be set only for recurrenceType == MONTHLY or recurrenceType == YEARLY <BR> 4) 'monthOfYear' should be set only for recurrenceType == YEARLY <BR> 5) for WEEKLY type you must set 'daysOfWeek'.<BR> 6) for MONTHLY type you must set 'dayOfMonth'. <BR> 7) for YEARLY type you must set 'dayOfMonth' and 'monthOfYear' <BR>
 */
- (RecurrenceDetails *)build;

- (void)copyAllFieldsTo:(RecurrenceDetails_RecurrenceDetailsBuilder *)other;

@end

__attribute__((always_inline)) inline void RecurrenceDetails_RecurrenceDetailsBuilder_init() {}

//J2OBJC_FIELD_SETTER(RecurrenceDetails_RecurrenceDetailsBuilder, recurrenceType_, RecurrenceType *)
//J2OBJC_FIELD_SETTER(RecurrenceDetails_RecurrenceDetailsBuilder, daysOfWeek__, ArrayList*)

#endif // _RecurrenceDetails_H_
