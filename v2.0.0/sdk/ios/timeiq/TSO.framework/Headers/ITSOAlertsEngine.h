//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/internalApi/ttlAlerts/ITSOAlertsEngine.java
//

#ifndef _ITSOAlertsEngine_H_
#define _ITSOAlertsEngine_H_

#import "NSNumber+JavaAPI.h"
@class TSOAlert;
@protocol ITSOAlertListener;
#import "JBArrayList.h"

#import "JB.h"

/**
 @brief The user can use this interface in order to get a TSOAlert.TSOAlertBuilder , add/remove TSOAlert , and query the engine for the added alerts.
 <BR> It is possible to listen to alerts' triggers and updates, using #initAlertsProvider(ITSOAlertListener) . <BR> <BR>
 */
@protocol ITSOAlertsEngine < NSObject >

/**
 @brief Register a new TSOAlert .
 <BR> You must verify that: <BR> (1) it is a valid TSOAlert , with a valid TSOPlace that contains a valid TSOCoordinate with latitude and longitude. <BR> (2) the time is valid (not a overdue already) <BR> (3) have at least one reminder <BR>
 @param tsoAlert the alert to add <BR> <BR> <BR> <U>Example:</U> <BR> <BR> <pre> <code></code> private ITSOAlert getNewAlert(String alertName, long latitude, long longitude, String locationName, String locationAddress) TSOPlace selectedLocation = new TSOPlace(latitude, longitude, locationName, locationAddress); long selectedDateTime = System.currentTimeMillis(); List<Long> remindersTimes = new ArrayList<Long>(); remindersTimes.add(new Long(5)); remindersTimes.add(new Long(12)); ITSOAlertBuilder tsoAlertBuilder = TSOAlertsEngine.getInstance().createAlertBuilder(selectedLocation, selectedDateTime); tsoAlertBuilder.setTag(alertName); tsoAlertBuilder.setReminderAtTtl(false); for (Long reminderTime : remindersTimes) { tsoAlertBuilder.addReminderBeforeTTL(reminderTime.longValue()); } ITSOAlert alert = null; try { alert = tsoAlertBuilder.build(); } catch (AlertBuildException e) { e.printStackTrace(); } TSOAlertsEngine.getInstance().addAlert(alert); return alert; } } </pre>
 */
- (void)addAlertWithTSOAlert:(TSOAlert *)tsoAlert;

/**
 @brief Initialize the ITSOAlertProvider with a listener that will receive the results for the alerts
 @param listener the callbacks listener that will receive the result for the alerts <BR> <BR> <BR> <U>Sample code for the listener's implementation</U> <BR> <BR> <pre> <code></code> public void onAlertTriggered(TSOAlertTriggeredResult result) Context context = getApplicationContext(); ITSOAlert alert = result.getAlert(); String alertId = alert.getId(); String alertName = alert.getTag(); String notificationTitle = "Alert has triggered"; String notificationMessage = alertName; NotificationCompat.Builder builder = new NotificationCompat.Builder(context). setSmallIcon(R.drawable.icon_time_white). setContentTitle(notificationTitle). setContentText(notificationMessage); String notificationLongMessage = "Alert name:" + notificationMessage + "\nAlert ID:" + alertId; if (notificationLongMessage != null) { NotificationCompat.BigTextStyle notificationStyle = new NotificationCompat.BigTextStyle(); notificationStyle.setBigContentTitle(notificationTitle); notificationStyle.setSummaryText(notificationMessage); notificationStyle.bigText(notificationLongMessage); builder.setStyle(notificationStyle); } Notification notification = builder.build(); NotificationManager m_notificationManager = (NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE); if (m_notificationManager != null) { m_notificationManager.notify(++m_notificationId, notification); // m_notificationId is a static member } } public void onAlertUpdated(TSOAlertUpdatedResult result) { if (result.isTerminated()) { Context context = getApplicationContext(); ITSOAlert alert = result.getAlert(); String alertId = alert.getId(); String alertName = alert.getTag(); String notificationTitle = "Alert has been terminated"; String notificationMessage = alertName; NotificationCompat.Builder builder = new NotificationCompat.Builder(context). setSmallIcon(R.drawable.icon_time_white). setContentTitle(notificationTitle). setContentText(notificationMessage); String notificationLongMessage = "Alert name:" + notificationMessage + "\nAlert ID:" + alertId; if (notificationLongMessage != null) { NotificationCompat.BigTextStyle notificationStyle = new NotificationCompat.BigTextStyle(); notificationStyle.setBigContentTitle(notificationTitle); notificationStyle.setSummaryText(notificationMessage); notificationStyle.bigText(notificationLongMessage); builder.setStyle(notificationStyle); } Notification notification = builder.build(); NotificationManager m_notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); if (m_notificationManager != null) { m_notificationManager.notify(++m_notificationId, notification); // m_notificationId is a static member } } } } </pre>
 */
- (void)initAlertsProviderWithITSOAlertListener:(id<ITSOAlertListener>)listener OBJC_METHOD_FAMILY_NONE;

/**
 @brief Get all the TSOAlert that were added (and are still waiting to be triggered, no done\terminated alerts will be returned)
 @return all valid alerts
 */
- (ArrayList*)getAllAlerts;

/**
 @brief Return a specific alert by its ID as defined by the system in creation time.
 @param alertId the alert's ID as defined by the system in creation time
 @return the alert requested or null if the alert was not found
 */
- (TSOAlert *)getAlertWithIdWithNSString:(NSString *)alertId;

/**
 @brief Remove a specific alert by its ID as defined by the system in creation time.
 @param alertId the alert's ID as defined by the system in creation time
 @return true if removed successfully
 */
- (boolean)removeAlertWithNSString:(NSString *)alertId;

/**
 @brief Remove all of the alerts
 @return true if the alerts were removed successfully
 */
- (boolean)removeAllAlerts;

/**
 @brief Get the time difference from the TTL to the next reminder
 @param alertId the alert's ID as defined by the system in creation time
 @return the next reminder time: <BR> negative number - the reminder is before the TTL <BR> zero - the reminder is at the TTL <BR> null - there are no more reminders to be shown for the alert, or if there is no alert with this ID
 */
- (Long *)getNextReminderTimeDiffWithNSString:(NSString *)alertId;

/**
 @brief This should be called on the onDestroy of the application or the service.
 */
- (void)onDestroy;

@end

__attribute__((always_inline)) inline void ITSOAlertsEngine_init() {}

#define ComIntelWearablePlatformTimeiqInternalApiTtlAlertsITSOAlertsEngine ITSOAlertsEngine

#endif // _ITSOAlertsEngine_H_
