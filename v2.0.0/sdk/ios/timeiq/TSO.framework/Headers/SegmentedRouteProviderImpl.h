//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/route/SegmentedRouteProviderImpl.java
//

#ifndef _SegmentedRouteProviderImpl_H_
#define _SegmentedRouteProviderImpl_H_

#import "JBVector.h"
@class MotType;
@class ResultCode;
@class ResultData;
@class RouteDataType;
@class TSOCoordinate;
@class UserStateData;
@protocol IBasicRouteProvider;
@protocol ITSOLogger;
@protocol ITSOTimeUtil;
@protocol ITimeUtil_ISO8601;
@protocol IUserStateManagerModule;

#import "JB.h"
#import "ISegmentedRouteProvider.h"

#define SegmentedRouteProviderImpl_AT_DESTINATION_DISTANCE 50.0
#define SegmentedRouteProviderImpl_DESTINATION_INDOOR 0LL
#define SegmentedRouteProviderImpl_NEAR_LOCATION_TIME_MINUTES 3
#define SegmentedRouteProviderImpl_ORIGIN_INDOOR 0LL
#define SegmentedRouteProviderImpl_TOO_FAR_FOR_DRIVING_DISTANCE 450000.0
#define SegmentedRouteProviderImpl_TOO_FAR_FOR_WALKING_DISTANCE 25000.0

/**
 @brief Created by smoradof on 1/18/15.
 */
@interface SegmentedRouteProviderImpl : NSObject < ISegmentedRouteProvider > {
 @public
  id<IUserStateManagerModule> m_userState_;
  id<IBasicRouteProvider> m_basicRouteProvider_;
  id<ITimeUtil_ISO8601> m_timeUtil_ISO8601_;
  id<ITSOLogger> m_logger_;
  id<ITSOTimeUtil> m_timeUtil_;
}

- (instancetype)init;

- (instancetype)initWithIUserStateManagerModule:(id<IUserStateManagerModule>)userState
                        withIBasicRouteProvider:(id<IBasicRouteProvider>)basicRouteProvider
                          withITimeUtil_ISO8601:(id<ITimeUtil_ISO8601>)timeUtil_ISO8601
                                 withITSOLogger:(id<ITSOLogger>)logger
                               withITSOTimeUtil:(id<ITSOTimeUtil>)timeUtil;

- (ResultData *)getTTLWithTSOCoordinate:(TSOCoordinate *)origin
                      withTSOCoordinate:(TSOCoordinate *)destination
                               withLong:(long64)arrivalTime
                        withMotType:(MotType *)userMot
                        withMotType:(MotType *)routeMot;

- (ResultData *)getWalkTTlWithTSOCoordinate:(TSOCoordinate *)origin
                          withTSOCoordinate:(TSOCoordinate *)destination
                                   withLong:(long64)arrivalTime
                                 withDouble:(double)aerialDistance;

- (ResultData *)getCarTTlWithTSOCoordinate:(TSOCoordinate *)origin
                         withTSOCoordinate:(TSOCoordinate *)destination
                                  withLong:(long64)arrivalTime
                               withBoolean:(boolean)isDriving
                                withDouble:(double)aerialDistance;

/**
 @brief checks if aerial distance is too far or at location
 @param isTTL
 @param routeMot
 @param aerialDistance
 @param isDriving
 @return success result with the correct type or null if it's not extreme
 */
- (RouteDataType *)checkExtremeAerialDistanceWithBoolean:(boolean)isTTL
                                             withMotType:(MotType *)routeMot
                                                  withDouble:(double)aerialDistance
                                                 withBoolean:(boolean)isDriving;

/**
 @brief check the origin, destination isDriving & mot. when TTL - checks that arrivalTime is in the future in ETA we don't check that since it's OK to ask for eta at the past
 @param isTTL
 @param origin
 @param destination
 @param time
 @param isDriving
 @param routeMot
 @return error ResultData or null if all is OK
 */
- (ResultCode *)checkRequestValidationWithBoolean:(boolean)isTTL
                                    withTSOCoordinate:(TSOCoordinate *)origin
                                    withTSOCoordinate:(TSOCoordinate *)destination
                                             withLong:(long64)time
                                          withBoolean:(boolean)isDriving
                                      withMotType:(MotType *)routeMot;

- (long64)addDestinationIndoorSegmentWithVector:(Vector *)segments
                                     withTSOCoordinate:(TSOCoordinate *)destination
                                              withLong:(long64)segmentTime
                                           withBoolean:(boolean)isTtl;

- (long64)addParkSegmentWithVector:(Vector *)segments
                        withTSOCoordinate:(TSOCoordinate *)destination
                                 withLong:(long64)segmentTime
                              withBoolean:(boolean)isTtl;

- (long64)addMainTravelSegmentWithVector:(Vector *)segments
                                 withResultData:(ResultData *)mainTravelRoute
                              withTSOCoordinate:(TSOCoordinate *)origin
                              withTSOCoordinate:(TSOCoordinate *)destination
                                withMotType:(MotType *)motType
                                       withLong:(long64)segmentTime
                                    withBoolean:(boolean)isTtl;

- (ResultData *)addWalkToCarSegmentWithVector:(Vector *)segments
                                       withResultData:(ResultData *)pedRoute
                                    withTSOCoordinate:(TSOCoordinate *)origin
                                    withUserStateData:(UserStateData *)userCarLocationRes
                                             withLong:(long64)segmentTime
                                          withBoolean:(boolean)isTtl;

- (long64)addOriginInDoorSegmentWithVector:(Vector *)segments
                                withTSOCoordinate:(TSOCoordinate *)origin
                                         withLong:(long64)segmentTime
                                      withBoolean:(boolean)isTtl;

- (ResultData *)getETAWithTSOCoordinate:(TSOCoordinate *)origin
                      withTSOCoordinate:(TSOCoordinate *)destination
                               withLong:(long64)departureTime
                        withMotType:(MotType *)userMot
                        withMotType:(MotType *)routeMot;

- (ResultData *)getWalkETAWithTSOCoordinate:(TSOCoordinate *)origin
                          withTSOCoordinate:(TSOCoordinate *)destination
                                   withLong:(long64)departureTime
                                 withDouble:(double)aerialDistance;

- (ResultData *)getCarETAWithTSOCoordinate:(TSOCoordinate *)origin
                         withTSOCoordinate:(TSOCoordinate *)destination
                                  withLong:(long64)departureTime
                               withBoolean:(boolean)isDriving
                                withDouble:(double)aerialDistance;

- (long64)getOriginIndoor;

- (long64)getTimeToCar;

- (long64)getParkTime;

- (long64)getDestinationIndoor;

- (void)copyAllFieldsTo:(SegmentedRouteProviderImpl *)other;

@end

FOUNDATION_EXPORT BOOL SegmentedRouteProviderImpl_initialized;
J2OBJC_STATIC_INIT(SegmentedRouteProviderImpl)

//J2OBJC_FIELD_SETTER(SegmentedRouteProviderImpl, m_userState_, id<IUserStateManagerModule>)
//J2OBJC_FIELD_SETTER(SegmentedRouteProviderImpl, m_basicRouteProvider_, id<IBasicRouteProvider>)
//J2OBJC_FIELD_SETTER(SegmentedRouteProviderImpl, m_timeUtil_ISO8601_, id<ITimeUtil_ISO8601>)
//J2OBJC_FIELD_SETTER(SegmentedRouteProviderImpl, m_logger_, id<ITSOLogger>)
//J2OBJC_FIELD_SETTER(SegmentedRouteProviderImpl, m_timeUtil_, id<ITSOTimeUtil>)

FOUNDATION_EXPORT NSString *SegmentedRouteProviderImpl_TAG_;
J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, TOO_FAR_FOR_DRIVING_DISTANCE, double)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, TOO_FAR_FOR_WALKING_DISTANCE, double)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, AT_DESTINATION_DISTANCE, double)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, NEAR_LOCATION_TIME_MINUTES, int)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, ORIGIN_INDOOR, long64)

FOUNDATION_EXPORT long64 SegmentedRouteProviderImpl_TIME_TO_CAR_;
J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, TIME_TO_CAR_, long64)

FOUNDATION_EXPORT long64 SegmentedRouteProviderImpl_PARK_TIME_;
J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, PARK_TIME_, long64)

J2OBJC_STATIC_FIELD_GETTER(SegmentedRouteProviderImpl, DESTINATION_INDOOR, long64)

typedef SegmentedRouteProviderImpl ComIntelWearablePlatformTimeiqRouteSegmentedRouteProviderImpl;

#endif // _SegmentedRouteProviderImpl_H_
