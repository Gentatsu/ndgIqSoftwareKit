//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/barilevi/development/j2objc_convertor/./all_sources_pre_converted/util/concurrent/TimeUnit.java
//

#ifndef _TimeUnit_
#define _TimeUnit_

#import "JBEnum.h"
#import "JBDefines.h"

#define Enum_RESTRICT 1
#define Enum_INCLUDE 1

#include "JBEnum.h"
#include "NSNumber+JavaAPI.h"
#include "NSArray+JavaAPI.h"

#define TimeUnit_C0 1LL
#define TimeUnit_C1 1000LL
#define TimeUnit_C2 1000000LL
#define TimeUnit_C3 1000000000LL
#define TimeUnit_C4 60000000000LL
#define TimeUnit_C5 3600000000000LL
#define TimeUnit_C6 86400000000000LL
#define TimeUnit_MAX 9223372036854775807LL

enum: NSUInteger {
  TimeUnit_NANOSECONDS = 0,
  TimeUnit_MICROSECONDS = 1,
  TimeUnit_MILLISECONDS = 2,
  TimeUnit_SECONDS = 3,
  TimeUnit_MINUTES = 4,
  TimeUnit_HOURS = 5,
  TimeUnit_DAYS = 6,
} ;

@interface TimeUnit : Enum //< NSCopying >
{
    
}
+ (Array*)values;

+(TimeUnit*) NANOSECONDS;
+(TimeUnit*) MICROSECONDS;
+(TimeUnit*) MILLISECONDS;
+(TimeUnit*) SECONDS;
+(TimeUnit*) MINUTES;
+(TimeUnit*) HOURS;
+(TimeUnit*) DAYS;

/**
 @brief Scale d by m, checking for overflow.
 This has a short name to make above code more readable.
 */
+ (long64)xWithLong:(long64)d
          withLong:(long64)m
          withLong:(long64)over;

/**
 @brief Convert the given time duration in the given unit to this unit.
 Conversions from finer to coarser granularities truncate, so lose precision. For example converting <tt>999</tt> milliseconds to seconds results in <tt>0</tt>. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to <tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt> if positive. <p>For example, to convert 10 minutes to milliseconds, use: <tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt>
 @param sourceDuration the time duration in the given <tt>sourceUnit</tt>
 @param sourceUnit the unit of the <tt>sourceDuration</tt> argument
 @return the converted duration in this unit, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 */
- (long64)convertWithLong:(long64)sourceDuration
        withTimeUnit:(TimeUnit *)sourceUnit;

/**
 @brief Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 */
- (long64)toNanosWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 */
- (long64)toMicrosWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 */
- (long64)toMillisWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>SECONDS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 */
- (long64)toSecondsWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>MINUTES.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @since 1.6
 */
- (long64)toMinutesWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>HOURS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration, or <tt>Long.MIN_VALUE</tt> if conversion would negatively overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
 @since 1.6
 */
- (long64)toHoursWithLong:(long64)duration;

/**
 @brief Equivalent to <tt>DAYS.convert(duration, this)</tt>.
 @param duration the duration
 @return the converted duration
 @since 1.6
 */
- (long64)toDaysWithLong:(long64)duration;

/**
 @brief Utility to compute the excess-nanosecond argument to wait, sleep, join.
 @param d the duration
 @param m the number of milliseconds
 @return the number of nanoseconds
 */
- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

/**
 @brief Performs a timed Object#wait(long,int) Object.wait using this time unit.
 This is a convenience method that converts timeout arguments into the form required by the <tt>Object.wait</tt> method. <p>For example, you could implement a blocking <tt>poll</tt> method (see BlockingQueue#poll BlockingQueue.poll ) using: <pre> <code>public synchronized Object poll(long timeout, TimeUnit unit)</code> throws InterruptedException while (empty) { unit.timedWait(this, timeout); ... } }}</pre>
 @param obj the object to wait on
 @param timeout the maximum time to wait. If less than or equal to zero, do not wait at all.
 @throws InterruptedException if interrupted while waiting
 */
- (void)timedWaitWithId:(id)obj
               withLong:(long64)timeout;

///**
// @brief Performs a timed Thread#join(long,int) Thread.join using this time unit.
// This is a convenience method that converts time arguments into the form required by the <tt>Thread.join</tt> method.
// @param thread the thread to wait for
// @param timeout the maximum time to wait. If less than or equal to zero, do not wait at all.
// @throws InterruptedException if interrupted while waiting
// */
//- (void)timedJoinWithNSThread:(NSThread *)thread
//                           withLong:(long64)timeout;

/**
 @brief Performs a Thread#sleep(long,int) Thread.sleep using this time unit.
 This is a convenience method that converts time arguments into the form required by the <tt>Thread.sleep</tt> method.
 @param timeout the minimum time to sleep. If less than or equal to zero, do not sleep at all.
 @throws InterruptedException if interrupted while sleeping
 */
- (void)sleepWithLong:(long64)timeout;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;
@end


TimeUnit* TimeUnit_NANOSECONDS_;
TimeUnit* TimeUnit_MICROSECONDS_;
TimeUnit* TimeUnit_MILLISECONDS_;
TimeUnit* TimeUnit_SECONDS_;
TimeUnit* TimeUnit_MINUTES_;
TimeUnit* TimeUnit_HOURS_;
TimeUnit* TimeUnit_DAYS_;

//FOUNDATION_EXPORT BOOL TimeUnit_initialized;
//J2OBJC_STATIC_INIT(TimeUnit)
//
//FOUNDATION_EXPORT TimeUnit *TimeUnit_values_[];
//
//#define TimeUnit_NANOSECONDS TimeUnit_values_[TimeUnit_NANOSECONDS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, NANOSECONDS, TimeUnit *)
////
//#define TimeUnit_MICROSECONDS TimeUnit_values_[TimeUnit_MICROSECONDS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, MICROSECONDS, TimeUnit *)
////
//#define TimeUnit_MILLISECONDS TimeUnit_values_[TimeUnit_MILLISECONDS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, MILLISECONDS, TimeUnit *)
////
//#define TimeUnit_SECONDS TimeUnit_values_[TimeUnit_SECONDS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, SECONDS, TimeUnit *)
////
//#define TimeUnit_MINUTES TimeUnit_values_[TimeUnit_MINUTES]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, MINUTES, TimeUnit *)
////
//#define TimeUnit_HOURS TimeUnit_values_[TimeUnit_HOURS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, HOURS, TimeUnit *)
//
//#define TimeUnit_DAYS TimeUnit_values_[TimeUnit_DAYS]
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, DAYS, TimeUnit *)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C0, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C1, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C2, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C3, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C4, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C5, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, C6, long64)
//
//J2OBJC_STATIC_FIELD_GETTER(TimeUnit, MAX, long64)
//#endif


//#if !defined (_TimeUnit_$1_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$1_INCLUDE)
//#define _TimeUnit_$1_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$1 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$1_init() {}
//#endif
//
//#if !defined (_TimeUnit_$2_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$2_INCLUDE)
//#define _TimeUnit_$2_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$2 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$2_init() {}
//#endif
//
//#if !defined (_TimeUnit_$3_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$3_INCLUDE)
//#define _TimeUnit_$3_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$3 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$3_init() {}
//#endif
//
//#if !defined (_TimeUnit_$4_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$4_INCLUDE)
//#define _TimeUnit_$4_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$4 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$4_init() {}
//#endif
//
//#if !defined (_TimeUnit_$5_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$5_INCLUDE)
//#define _TimeUnit_$5_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$5 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$5_init() {}
//#endif
//
//#if !defined (_TimeUnit_$6_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$6_INCLUDE)
//#define _TimeUnit_$6_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$6 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

__attribute__((always_inline)) inline void TimeUnit_$6_init() {}
//#endif
//
//#if !defined (_TimeUnit_$7_) && (TimeUnit_INCLUDE_ALL || TimeUnit_$7_INCLUDE)
//#define _TimeUnit_$7_
//
//#define TimeUnit_RESTRICT 1
//#define TimeUnit_INCLUDE 1
//#include "JBTimeUnit.h"

@interface TimeUnit_$7 : TimeUnit {
}

- (long64)toNanosWithLong:(long64)d;

- (long64)toMicrosWithLong:(long64)d;

- (long64)toMillisWithLong:(long64)d;

- (long64)toSecondsWithLong:(long64)d;

- (long64)toMinutesWithLong:(long64)d;

- (long64)toHoursWithLong:(long64)d;

- (long64)toDaysWithLong:(long64)d;

- (long64)convertWithLong:(long64)d
        withTimeUnit:(TimeUnit *)u;

- (int)excessNanosWithLong:(long64)d
                   withLong:(long64)m;

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(int)__ordinal;

@end

#define TimeUnit_get_NANOSECONDS() [TimeUnit NANOSECONDS]
#define TimeUnit_get_MICROSECONDS() [TimeUnit MICROSECONDS]
#define TimeUnit_get_MILLISECONDS() [TimeUnit MILLISECONDS]
#define TimeUnit_get_SECONDS() [TimeUnit SECONDS]
#define TimeUnit_get_MINUTES() [TimeUnit MINUTES]
#define TimeUnit_get_HOURS() [TimeUnit HOURS]
#define TimeUnit_get_DAYS() [TimeUnit DAYS]



__attribute__((always_inline)) inline void TimeUnit_$7_init() {}
#endif
