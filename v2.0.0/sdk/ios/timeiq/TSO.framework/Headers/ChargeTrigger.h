//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/api/triggers/charge/ChargeTrigger.java
//

#ifndef _ChargeTrigger_H_
#define _ChargeTrigger_H_

@class ChargeTriggerType;
@class ChargeTrigger_ChargeTriggerBuilder;
@class TriggerStatus;

#import "JB.h"
#include "BaseTrigger.h"

#define ChargeTrigger_DEFAULT_PERCENT 15

/**
 @brief This class represents a trigger based on pre-defined charging conditions
 */
@interface ChargeTrigger : BaseTrigger {
 @public
  ChargeTriggerType *m_chargeTriggerType_;
  int m_percent_;
}

/**
 @brief Create the ChargeTrigger using a builder
 @param builder the builder that has the input parameters for the trigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithChargeTrigger_ChargeTriggerBuilder:(ChargeTrigger_ChargeTriggerBuilder *)builder;

/**
 @brief Create the ChargeTrigger using parameters (the builder should be used in most cases)
 @param id the unique ID of the trigger
 @param tag tag that can be used for extra data in the trigger (can be null)
 @param chargeTriggerType the charge type that will determine the state in which the trigger will trigger
 @param percent the battery percent threshold for ChargeTriggerType#BATTERY_LOW \ ChargeTriggerType#BATTERY_OK (defaults to ChargeTriggerBuilder#DEFAULT_PERCENT , does not affect other types)
 @param status the status of the trigger
 @param triggeredTime the time that the trigger was triggered, or -1 if not triggered yet
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithNSString:(NSString *)id_
                    withNSString:(NSString *)tag
       withChargeTriggerType:(ChargeTriggerType *)chargeTriggerType
                         withInt:(int)percent
           withTriggerStatus:(TriggerStatus *)status
                        withLong:(long64)triggeredTime;

/**
 @return the charge type that determines the state in which the trigger will trigger
 */
- (ChargeTriggerType *)getChargeTriggerType;

/**
 @return the battery percent threshold for ChargeTriggerType#BATTERY_LOW \ ChargeTriggerType#BATTERY_OK (defaults to ChargeTriggerBuilder#DEFAULT_PERCENT , does not affect other types)
 */
- (int)getPercent;

- (boolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)copyAllFieldsTo:(ChargeTrigger *)other;

@end

__attribute__((always_inline)) inline void ChargeTrigger_init() {}

//J2OBJC_FIELD_SETTER(ChargeTrigger, m_chargeTriggerType_, ChargeTriggerType *)

J2OBJC_STATIC_FIELD_GETTER(ChargeTrigger, DEFAULT_PERCENT, int)

typedef ChargeTrigger ComIntelWearablePlatformTimeiqApiTriggersChargeChargeTrigger;

/**
 @brief Builder for the ChargeTrigger class
 */
@interface ChargeTrigger_ChargeTriggerBuilder : BaseTrigger_BaseTriggerBuilder {
 @public
  ChargeTriggerType *chargeTriggerType_;
  int percent_;
}

/**
 @brief Create a builder for creating the ChargeTrigger
 @param chargeTriggerType the charge type that will determine the state in which the trigger will trigger
 */
- (instancetype)initWithChargeTriggerType:(ChargeTriggerType *)chargeTriggerType;

/**
 @param percent the battery percent threshold for ChargeTriggerType#BATTERY_LOW \ ChargeTriggerType#BATTERY_OK (defaults to ChargeTriggerBuilder#DEFAULT_PERCENT , does not affect other types)
 @return the builder
 */
- (ChargeTrigger_ChargeTriggerBuilder *)setPercentWithInt:(int)percent;

/**
 @brief Create the ChargeTrigger
 @return the ChargeTrigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (ChargeTrigger *)build;

- (void)copyAllFieldsTo:(ChargeTrigger_ChargeTriggerBuilder *)other;

@end

__attribute__((always_inline)) inline void ChargeTrigger_ChargeTriggerBuilder_init() {}

//J2OBJC_FIELD_SETTER(ChargeTrigger_ChargeTriggerBuilder, chargeTriggerType_, ChargeTriggerType *)

#endif // _ChargeTrigger_H_
