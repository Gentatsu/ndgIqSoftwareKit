//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/sensors/devicestatemanager/DeviceStateManager.java
//

#ifndef _DeviceStateManager_H_
#define _DeviceStateManager_H_

@class BaseSensorData;
@class BatteryLeverInfoData;
@class BatteryStateInfo;
@class ChargeMethod;
@class DeviceStateData;
@class DeviceStateSensorData;
@class GpsState;
@class LocationServicesStateInfo;
@class NetworkState;
@class NetworkStateInfo;
@class ReceiverSensorsRequest;
@class SensorType;
@class TimeZoneState;
@class WifiState;
@protocol IDeviceStateListener;
#import "JBArrayList.h"

#import "JB.h"
#include "IDeviceStateManager.h"
#include "ISensorDataReceiver.h"

/**
 @brief Created by eleuchte on 26/07/2015.
 */
@interface DeviceStateManager : NSObject < IDeviceStateManager, ISensorDataReceiver > {
 @public
  ArrayList* m_deviceStateListeners_;
  long64 m_currentTimeStamp_;
  long64 m_recentGPSFixTimeStamp_;
  NetworkStateInfo *m_networkStateInfo_;
  BatteryStateInfo *m_batteryStateInfo_;
  TimeZoneState *m_timeZoneState_;
  LocationServicesStateInfo *m_locationServicesStateInfo_;
}

- (instancetype)init;

- (void)registerListenerWithIDeviceStateListener:(id<IDeviceStateListener>)deviceStateListener;

- (void)unRegisterListenerWithIDeviceStateListener:(id<IDeviceStateListener>)deviceStateListener;

- (int)getBatteryLevel;

- (ChargeMethod *)getChargingMethod;

- (boolean)isSendDataOverNetwork;

- (boolean)isNetworkRoaming;

- (boolean)isNetworkOverWifi;

- (boolean)isNetworkAvailable;

- (boolean)isGPSAvailable;

- (void)onDataReceivedWithBaseSensorData:(BaseSensorData *)data;

- (void)networkStateEffectWithDeviceStateSensorData:(DeviceStateSensorData *)data;

- (void)handleMissingFirstSamplesWithBaseSensorData:(BaseSensorData *)data;

- (void)batteryChangeEffectWithBaseSensorData:(BaseSensorData *)data;

- (void)updateOnChangeWithDeviceStateData:(DeviceStateData *)deviceStateDataChanged
                         withJavaUtilList:(ArrayList*)changesList;

- (ArrayList*)processBatteryChangesWithBatteryLeverInfoData:(BatteryLeverInfoData *)data;

- (ArrayList*)processNetworkChangesWithNetworkState:(NetworkState *)networkState;

/**
 @brief Rules for allowing send data over network: - Network is available and using wifi - battery level over 60% and charging OR battery level over 80% (charging regardless)
 */
- (ArrayList*)checkSendDataOverNetwork;

- (ArrayList*)processLocationChangesWithGpsState:(GpsState *)gpsState
                                                  withLong:(long64)timeStamp;

- (boolean)processWifiChangesWithWifiState:(WifiState *)wifiState;

- (void)onResetReceiver;

- (void)onSampleIntervalChangedWithSensorType:(SensorType *)sensorType
                                         withLong:(long64)sampleInterval;

/**
 @brief create the sensor request
 @return 
 */
- (ReceiverSensorsRequest *)generateReceiverSensorsRequest;

- (void)copyAllFieldsTo:(DeviceStateManager *)other;

@end

FOUNDATION_EXPORT BOOL DeviceStateManager_initialized;
J2OBJC_STATIC_INIT(DeviceStateManager)

//J2OBJC_FIELD_SETTER(DeviceStateManager, m_deviceStateListeners_, ArrayList*)
//J2OBJC_FIELD_SETTER(DeviceStateManager, m_networkStateInfo_, NetworkStateInfo *)
//J2OBJC_FIELD_SETTER(DeviceStateManager, m_batteryStateInfo_, BatteryStateInfo *)
//J2OBJC_FIELD_SETTER(DeviceStateManager, m_timeZoneState_, TimeZoneState *)
//J2OBJC_FIELD_SETTER(DeviceStateManager, m_locationServicesStateInfo_, LocationServicesStateInfo *)

FOUNDATION_EXPORT NSString *DeviceStateManager_TAG_;
J2OBJC_STATIC_FIELD_GETTER(DeviceStateManager, TAG_, NSString *)

FOUNDATION_EXPORT long64 DeviceStateManager_WAIT_FOR_FIXED_GPS_MAX_;
J2OBJC_STATIC_FIELD_GETTER(DeviceStateManager, WAIT_FOR_FIXED_GPS_MAX_, long64)

FOUNDATION_EXPORT id DeviceStateManager_m_lock_;
J2OBJC_STATIC_FIELD_GETTER(DeviceStateManager, m_lock_, id)
//J2OBJC_STATIC_FIELD_SETTER(DeviceStateManager, m_lock_, id)

typedef DeviceStateManager ComIntelWearablePlatformTimeiqSensorsDevicestatemanagerDeviceStateManager;

#endif // _DeviceStateManager_H_
