//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/common/preferences/APrefs.java
//

#ifndef _APrefs_H_
#define _APrefs_H_

@class ClassFactory;
#import "JBClass.h"
@class ObserverHelper;
@class PrefsFileType;
@class PrefsStorage;
@class Result;
@protocol IJSONUtils;
@protocol IPrefsChangedListener;
@protocol IPrefsLoader;
#import "JBArrayList.h"
#import "JBHashtable.h"
@protocol JavaUtilMap_Entry;
#import "JBHashSet.h"

#import "JB.h"
#include "IPrefs.h"
#include "ObserverHelper.h"
#include "ITSOBaseDBObject.h"

#define APrefs_USER_CHANGE_VERSION -1.0

/**
 @brief Created by mleib on 29/07/2015.
 */
@interface APrefs : NSObject < ITSOBaseDBObject, IPrefs > {
 @public
  id<IPrefsLoader> m_prefsLoader_;
  id<IJSONUtils> m_jsonUtils_;
  HashMap* dataMap_;
  id dataMapLock_;
  PrefsStorage *prefsStorage_;
  ObserverHelper *prefsChangedListeners_;
  boolean initOccurred_;
}

- (instancetype)init;

- (instancetype)initWithClassFactory:(ClassFactory *)classFactory;

- (instancetype)initWithIPrefsLoader:(id<IPrefsLoader>)prefsLoader
                      withIJSONUtils:(id<IJSONUtils>)jsonUtils;

- (void)init__WithPrefsFileType:(PrefsFileType *)prefsFileType OBJC_METHOD_FAMILY_NONE;

- (boolean)prefsFileDoesNotExistInRepository;

- (void)addPrefsFileFromResourceWithPrefsFileType:(PrefsFileType *)prefsFile;

- (id)getPrefsFromResourceWithPrefsFileType:(PrefsFileType *)prefsFileType;

- (boolean)upgradeOccurred;

- (void)mergePrefsFileFromResourceToRepositoryWithPrefsFileType:(PrefsFileType *)prefsFileType;

- (HashMap*)getFlatMapWithJavaUtilMap:(HashMap*)map;

- (void)getFlatMapHelperWithJavaUtilMap:(HashMap*)flatMap
                        withJavaUtilMap:(HashMap*)map
                           withNSString:(NSString *)parent;

- (boolean)updateValueFromResourceToRepositoryIfNeededWithJavaUtilMap:(HashMap*)flatMapFromRepository
                                                 withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entryFromResource;

- (void)loadDataFromRepository;

- (void)throwErrorOnNoInit;

/**
 @brief should create and return the storage (inherited from prefsStorage)
 */
- (PrefsStorage *)createAndReturnStorage;

- (void)registerForChangeWithIPrefsChangedListener:(id<IPrefsChangedListener>)prefsChangedListener;

- (void)unregisterForChangeWithIPrefsChangedListener:(id<IPrefsChangedListener>)prefsChangedListener;

- (boolean)containsWithNSString:(NSString *)key;

/**
 @brief Get an Integer according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (int)getIntWithNSString:(NSString *)key;

/**
 @brief Get a Long according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (long64)getLongWithNSString:(NSString *)key;

/**
 @brief Get n Float according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (float)getFloatWithNSString:(NSString *)key;

/**
 @brief Get a Double according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (double)getDoubleWithNSString:(NSString *)key;

/**
 @brief Get a Boolean according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (boolean)getBooleanWithNSString:(NSString *)key;

/**
 @brief Get a String according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (NSString *)getStringWithNSString:(NSString *)key;

/**
 @brief Get a List of Strings according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (ArrayList*)getStringArrayWithNSString:(NSString *)key;

/**
 @brief Get an IMappable according to the key specified Make sure you use contains if you are not sure the value exists
 @throws InputMismatchException if the key was not found or the type of the value is wrong
 */
- (HashMap*)getMapWithNSString:(NSString *)key;

- (id)getWithNSString:(NSString *)key;

/**
 @brief add or update a key\value pair
 */
- (Result *)setIntWithNSString:(NSString *)key
                       withInt:(int)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setLongWithNSString:(NSString *)key
                       withLong:(long64)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setFloatWithNSString:(NSString *)key
                       withFloat:(float)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setDoubleWithNSString:(NSString *)key
                       withDouble:(double)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setBooleanWithNSString:(NSString *)key
                       withBoolean:(boolean)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setStringWithNSString:(NSString *)key
                     withNSString:(NSString *)value;

/**
 @brief add or update a key\values pair
 */
- (Result *)setStringArrayWithNSString:(NSString *)key
                      withJavaUtilList:(ArrayList*)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setMapWithNSString:(NSString *)key
               withJavaUtilMap:(HashMap*)value;

/**
 @brief add or update a key\value pair
 */
- (Result *)setWithNSString:(NSString *)key
                     withId:(id)value;

+ (boolean)isSupportedClassTypeWithId:(id)value;

+ (boolean)isWrapperTypeWithClass :(Class )clazz;

- (void)setInternalWithNSString:(NSString *)key
                         withId:(id)value;

- (void)setInternalHelperWithJavaUtilMap:(HashMap*)map
                            withNSString:(NSString *)key
                                  withId:(id)value
                              withDouble:(double)version_;

- (id)getInternalWithJavaUtilMap:(HashMap*)map
                    withNSString:(NSString *)key;

- (boolean)isMapNameAvailableWithNSString:(NSString *)key;

- (NSString *)getFirstMapNameWithNSString:(NSString *)key;

- (NSString *)cutOutFirstMapNameWithNSString:(NSString *)key;

+ (Set*)getWrapperTypes;

- (void)initObjectFromMapWithJavaUtilMap:(HashMap*)stringObjectMap OBJC_METHOD_FAMILY_NONE;

- (HashMap*)objectToMap;

- (void)setObjectIdWithNSString:(NSString *)s;

- (void)setLastUserInteractionTimeWithLong:(long64)l;

- (long64)getLastUserInteractionTime;

- (long64)getCreationTime;

- (void)copyAllFieldsTo:(APrefs *)other;

@end

FOUNDATION_EXPORT BOOL APrefs_initialized;
J2OBJC_STATIC_INIT(APrefs)

//J2OBJC_FIELD_SETTER(APrefs, m_prefsLoader_, id<IPrefsLoader>)
//J2OBJC_FIELD_SETTER(APrefs, m_jsonUtils_, id<IJSONUtils>)
//J2OBJC_FIELD_SETTER(APrefs, dataMap_, HashMap*)
//J2OBJC_FIELD_SETTER(APrefs, dataMapLock_, id)
//J2OBJC_FIELD_SETTER(APrefs, prefsStorage_, PrefsStorage *)
//J2OBJC_FIELD_SETTER(APrefs, prefsChangedListeners_, ObserverHelper *)

J2OBJC_STATIC_FIELD_GETTER(APrefs, USER_CHANGE_VERSION, double)

FOUNDATION_EXPORT Set* APrefs_WRAPPER_TYPES_;
J2OBJC_STATIC_FIELD_GETTER(APrefs, WRAPPER_TYPES_, Set*)

FOUNDATION_EXPORT NSString *APrefs_OBJECT_ID_FIELD_;
J2OBJC_STATIC_FIELD_GETTER(APrefs, OBJECT_ID_FIELD_, NSString *)

FOUNDATION_EXPORT NSString *APrefs_DELIMITER_;
J2OBJC_STATIC_FIELD_GETTER(APrefs, DELIMITER_, NSString *)

typedef APrefs ComIntelWearablePlatformTimeiqCommonPreferencesAPrefs;

@interface APrefs_$1 : NSObject < ObserverHelper_IObserverNotifier > {
 @public
  NSString *val$key_;
  id val$value_;
}

- (void)notifyWithId:(id<IPrefsChangedListener>)observer;

- (instancetype)initWithNSString:(NSString *)capture$0
                          withId:(id)capture$1;

@end

__attribute__((always_inline)) inline void APrefs_$1_init() {}

//J2OBJC_FIELD_SETTER(APrefs_$1, val$key_, NSString *)
//J2OBJC_FIELD_SETTER(APrefs_$1, val$value_, id)

#endif // _APrefs_H_
