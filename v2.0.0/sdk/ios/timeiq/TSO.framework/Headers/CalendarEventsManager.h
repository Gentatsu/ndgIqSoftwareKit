//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/events/CalendarEventsManager.java
//

#ifndef _CalendarEventsManager_H_
#define _CalendarEventsManager_H_

@class EventContext;
@class EventIdManager;
@class EventsAudit;
@class EventsManager;
@class EventsPersistenceUtil;
@class EventsPriorityQueue;
@class ResultData;
@class TSOCalendarEvent;
@class TSOCalendarMeeting;
@class TSOEventChangeType;
@class TSOEventsSync;
@class TSOPlace;
@protocol IInternalMessageEngine;
@protocol ILocationProvider;
@protocol IResolverModule;
@protocol ISdkDefaultPrefs;
@protocol ITSOAlarmManager;
@protocol ITSOCalendarsManager;
@protocol ITSOEvent;
@protocol ITSOLogger;
@protocol ITSOTimeUtil;
@protocol IUserStateManagerModule;
#import "TrReadWriteLock.h"
#import "TrReadWriteLock.h"
#import "JBArrayList.h"
#import "JBHashSet.h"

#import "JB.h"
#import "ICalendarListener.h"
#import "ITSOAlarmListener.h"
#import "IEventSyncListener.h"
#import "JBCallable.h"

#define CalendarEventsManager_DAY 86400000LL
#define CalendarEventsManager_ONE_DAY 86400000LL
#define CalendarEventsManager_ONE_MINUTE 60000LL
#define CalendarEventsManager_RE_RESOLVE_BASE_TIME_WAIT 300000LL
#define CalendarEventsManager_RE_RESOLVE_MAX_TIME_WAIT 3600000LL
#define CalendarEventsManager_SIX_HOURS 21600000LL
#define CalendarEventsManager_WEEK 604800000LL

/**
 @brief Created by kyablonk on 17/06/2015.
 */
@interface CalendarEventsManager : NSObject < ICalendarListener, IEventSyncListener, ITSOAlarmListener > {
 @public
  double lowLocationAccuracy_;
  long64 highLocationMaxAge_;
  EventsManager *eventManager_;
  id<ITSOCalendarsManager> calendarsManager_;
  EventsAudit *eventsAudit_;
  EventIdManager *eventIdManager_;
  EventsPersistenceUtil *persistenceUtil_;
  id<IResolverModule> resolver_;
  id<IUserStateManagerModule> userStateManager_;
  id<ITSOAlarmManager> alarmManager_;
  id<ITSOTimeUtil> timerUtil_;
  id<ITSOLogger> logger_;
  id<IInternalMessageEngine> internalMsgHandler_;
  id<ILocationProvider> locationProvider_;
  long64 eventsManagerInsertTimeFrame_;
  long64 calendarFetchTimeFrame_;
  long64 calendarFetchSampleRate_;
  long64 lastEventSentInTimeFrameTime_;
  long64 lastMeetingFetchedInTimeFrameTime_;
  boolean onlyWriteMode_;
  long64 lastEventsManagerInsertSampleTime_;
  TrReadWriteLock* syncCalendarChangeLock_;
  id timeFrameLock_;
  Hashtable* failedResolveEventsToAttemptDelay_;
  Hashtable* meetingIdToMeeting_;
  Hashtable* meetingIdToCache_;
  EventsPriorityQueue *calendarEvents_;
}

- (instancetype)init;

- (instancetype)initWithEventsManager:(EventsManager *)eventManager
                   withEventIdManager:(EventIdManager *)eventIdManager
                      withEventsAudit:(EventsAudit *)eventsAudit
            withEventsPersistenceUtil:(EventsPersistenceUtil *)persistenceUtil
                    withTSOEventsSync:(TSOEventsSync *)sync
                  withIResolverModule:(id<IResolverModule>)resolver
             withITSOCalendarsManager:(id<ITSOCalendarsManager>)calendarsManager
                 withISdkDefaultPrefs:(id<ISdkDefaultPrefs>)userPref
          withIUserStateManagerModule:(id<IUserStateManagerModule>)userStateManager
                 withITSOAlarmManager:(id<ITSOAlarmManager>)alarmManager
                     withITSOTimeUtil:(id<ITSOTimeUtil>)timerUtil
                       withITSOLogger:(id<ITSOLogger>)logger
           withIInternalMessageEngine:(id<IInternalMessageEngine>)internalMsgHandler
                withILocationProvider:(id<ILocationProvider>)locationProvider;

- (TSOCalendarEvent *)getEventByClientIdWithNSString:(NSString *)clientEventId;

- (ArrayList*)getEventsByDatesWithLong:(long64)startTimeFrame
                                    withLong:(long64)endTimeFrame;

- (ArrayList*)getEventsByDatesWithJavaUtilList:(ArrayList*)calendarIds
                                            withLong:(long64)startTimeFrame
                                            withLong:(long64)endTimeFrame;

- (ArrayList*)getEventsByDatesFromMemoryWithLong:(long64)startTimeFrame
                                              withLong:(long64)endTimeFrame;

- (void)onCalendarChangeWithNSString:(NSString *)calendarId;

- (void)onEventUpdateWithITSOEvent:(id<ITSOEvent>)event
        withTSOEventChangeType:(TSOEventChangeType *)changeType
                  withEventContext:(EventContext *)eventContext;

- (void)onEventUpdateWithJavaUtilSet:(Set*)events
          withTSOEventChangeType:(TSOEventChangeType *)changeType
                    withEventContext:(EventContext *)eventContext;

- (void)onAlarmWithNSString:(NSString *)action
               withNSString:(NSString *)id_
               withNSString:(NSString *)data;

- (void)reScheduleAlarm;

- (long64)calculateNextDelay;

- (TSOCalendarEvent *)buildTSOCalendarEventWithITSOEvent:(id<ITSOEvent>)event;

- (boolean)addFromSyncWithJavaUtilSet:(Set*)events
                      withEventContext:(EventContext *)eventContext;

- (boolean)addFromSyncWithITSOEvent:(id<ITSOEvent>)event
                    withEventContext:(EventContext *)eventContext;

- (void)addFromCalendarWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting
                             withEventContext:(EventContext *)eventContext;

- (ArrayList*)convertMeetingAttendeesWithJavaUtilList:(ArrayList*)meetingAttendees;

- (boolean)addTSOEventToManagerWithTSOCalendarEvent:(TSOCalendarEvent *)calendarEvent
                                    withEventContext:(EventContext *)eventContext;

- (boolean)addCalendarEventToEventsManagerWithTSOCalendarEvent:(TSOCalendarEvent *)calendarEvent
                                               withEventContext:(EventContext *)eventContext;

- (boolean)deleteTSOEventWithNSString:(NSString *)eventId
                      withEventContext:(EventContext *)eventContext;

- (void)updateFromCalendarWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting
                                withEventContext:(EventContext *)eventContext;

- (boolean)updateFromSyncWithITSOEvent:(id<ITSOEvent>)event
                       withEventContext:(EventContext *)eventContext;

- (boolean)updateFromSyncWithJavaUtilSet:(Set*)events
                         withEventContext:(EventContext *)eventContext;

- (TSOCalendarMeeting *)createMeetingForEventWithTSOCalendarEvent:(TSOCalendarEvent *)event;

- (boolean)deleteFromSyncWithITSOEvent:(id<ITSOEvent>)event
                       withEventContext:(EventContext *)eventContext;

- (boolean)deleteFromSyncWithJavaUtilSet:(Set*)events
                         withEventContext:(EventContext *)eventContext;

- (boolean)updateTSOEventWithNSString:(NSString *)eventId
                  withTSOCalendarEvent:(TSOCalendarEvent *)newCalendarEvent
                      withEventContext:(EventContext *)eventContext;

- (void)cleanOldData;

- (void)getMeetingsFromCalendarWithLong:(long64)start
                               withLong:(long64)end
                       withEventContext:(EventContext *)eventContext;

- (boolean)shouldAddWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting;

- (boolean)isInCalendarTimeFrameWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting;

- (boolean)shouldAddWithTSOCalendarEvent:(TSOCalendarEvent *)calendarEvent;

- (boolean)isInCalendarFetchTimeFrameWithTSOCalendarEvent:(TSOCalendarEvent *)calendarEvent;

- (TSOPlace *)resolveLocationWithTSOCalendarEvent:(TSOCalendarEvent *)tsoCalendarEvent
                                 withEventContext:(EventContext *)eventContext;

- (TSOPlace *)getSingleResolutionWithJavaUtilList:(ArrayList*)definiteResults
                                 withJavaUtilList:(ArrayList*)plausibleResults;

- (NSString *)getMeetingIdFromEventIdWithNSString:(NSString *)eventId;

- (NSString *)getEventIdFromMeetingIdWithNSString:(NSString *)meetingId;

- (boolean)sameMeetingWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting1
                       withTSOCalendarMeeting:(TSOCalendarMeeting *)meeting2;

- (boolean)shouldUpdateWithTSOCalendarMeeting:(TSOCalendarMeeting *)meeting1
                        withTSOCalendarMeeting:(TSOCalendarMeeting *)meeting2;

- (boolean)isEventUpToDateWithTSOCalendarEvent:(TSOCalendarEvent *)calendarEvent
                         withTSOCalendarMeeting:(TSOCalendarMeeting *)meeting;

- (void)copyAllFieldsTo:(CalendarEventsManager *)other;

@end

__attribute__((always_inline)) inline void CalendarEventsManager_init() {}

//J2OBJC_FIELD_SETTER(CalendarEventsManager, eventManager_, EventsManager *)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, calendarsManager_, id<ITSOCalendarsManager>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, eventsAudit_, EventsAudit *)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, eventIdManager_, EventIdManager *)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, persistenceUtil_, EventsPersistenceUtil *)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, resolver_, id<IResolverModule>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, userStateManager_, id<IUserStateManagerModule>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, alarmManager_, id<ITSOAlarmManager>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, timerUtil_, id<ITSOTimeUtil>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, logger_, id<ITSOLogger>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, internalMsgHandler_, id<IInternalMessageEngine>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, locationProvider_, id<ILocationProvider>)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, syncCalendarChangeLock_, TrReadWriteLock*)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, timeFrameLock_, id)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, failedResolveEventsToAttemptDelay_, Hashtable*)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, meetingIdToMeeting_, Hashtable*)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, meetingIdToCache_, Hashtable*)
//J2OBJC_FIELD_SETTER(CalendarEventsManager, calendarEvents_, EventsPriorityQueue *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_TAG_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, ONE_DAY, long64)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, SIX_HOURS, long64)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, WEEK, long64)

FOUNDATION_EXPORT NSString *CalendarEventsManager_SCHEDULED_CALENDAR_EVENT_ALERT_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, SCHEDULED_CALENDAR_EVENT_ALERT_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_SCHEDULED_CALENDAR_EVENT_ALERT_ID_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, SCHEDULED_CALENDAR_EVENT_ALERT_ID_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_SCHEDULED_CALENDAR_FETCH_EVENTS_ALERT_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, SCHEDULED_CALENDAR_FETCH_EVENTS_ALERT_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_SCHEDULED_CALENDAR_FETCH_EVENTS_ALERT_ID_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, SCHEDULED_CALENDAR_FETCH_EVENTS_ALERT_ID_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_RE_RESOLVE_ATTEMPT_ALERT_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, RE_RESOLVE_ATTEMPT_ALERT_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_RE_RESOLVE_ATTEMPT_ALERT_ID_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, RE_RESOLVE_ATTEMPT_ALERT_ID_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_READ_FROM_CALENDAR_KEY_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, READ_FROM_CALENDAR_KEY_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_LOW_LOCATION_ACCURACY_KEY_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, LOW_LOCATION_ACCURACY_KEY_, NSString *)

FOUNDATION_EXPORT NSString *CalendarEventsManager_HIGH_LOCATION_MAX_AGE_KEY_;
J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, HIGH_LOCATION_MAX_AGE_KEY_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, RE_RESOLVE_BASE_TIME_WAIT, long64)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, RE_RESOLVE_MAX_TIME_WAIT, long64)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, ONE_MINUTE, long64)

J2OBJC_STATIC_FIELD_GETTER(CalendarEventsManager, DAY, long64)

typedef CalendarEventsManager ComIntelWearablePlatformTimeiqEventsCalendarEventsManager;

@interface CalendarEventsManager_$1 : NSObject < Callable > {
 @public
  CalendarEventsManager *this$0_;
  TSOCalendarEvent *val$tsoCalendarEvent_;
}

- (ResultData *)call;

- (instancetype)initWithCalendarEventsManager:(CalendarEventsManager *)outer$
                         withTSOCalendarEvent:(TSOCalendarEvent *)capture$0;

@end

__attribute__((always_inline)) inline void CalendarEventsManager_$1_init() {}

//J2OBJC_FIELD_SETTER(CalendarEventsManager_$1, this$0_, CalendarEventsManager *)
//J2OBJC_FIELD_SETTER(CalendarEventsManager_$1, val$tsoCalendarEvent_, TSOCalendarEvent *)

#endif // _CalendarEventsManager_H_
