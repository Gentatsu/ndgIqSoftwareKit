//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/places/modules/motmodule/algs/MotDetectorV2.java
//

#ifndef _MotDetectorV2_H_
#define _MotDetectorV2_H_

@class ActivitySensorData;
@class BluetoothDeviceSensorData;
@class LocationBaseSensorData;
@class Mot;
@class MotInfo;
@class PlacesActivityType;
@protocol IMotDetectionModule;
#import "JBArrayList.h"
#import "JBHashtable.h"

#import "JB.h"
#include "IMotDetector.h"

#define MotDetectorV2_ACTIVITY_RECOGNITION_RATE_CHANGE_DELTA 2000
#define MotDetectorV2_ACTIVITY_RECOGNITION_RATE_FAST 2000
#define MotDetectorV2_MAX_DOWN_TIME 20000LL

@interface MotDetectorV2 : NSObject < IMotDetector > {
 @public
  int MINUTES_TO_MILLIS_;
  int SECONDS_TO_MILLIS_;
  id<IMotDetectionModule> m_motDetectionModule_;
  MotInfo *m_currentMot_;
  ArrayList* m_previousActivitySamples_;
  int m_countStillNotDriving_;
  int m_countWalksNotDriving_;
  int m_countStillOnDrive_;
  int m_countWalkOnDrive_;
  long64 m_lastDriveDetectionTime_;
  long64 m_lastHighConfidenceUorT_;
  long64 m_lastFollowingInVehicleSamplesTime_;
  long64 m_now_;
  long64 m_lastInRowVehicleSamplesTime_;
  int m_inVehicleSamplesInRow_;
  long64 m_lastDrivingSpeedTime_;
  long64 m_lastTimeMotChangedToDriving_;
  LocationBaseSensorData *m_locInFirstSeriesOf100_;
  long64 m_timeInFirstSeriesOf100_;
  long64 m_lastLocationUpdateTime_;
  PlacesActivityType *m_lastMostProbableActivity_;
  ArrayList* m_shortTermActivitiesHistory_;
  LocationBaseSensorData *m_currLoc_;
  LocationBaseSensorData *m_prevLoc_;
  LocationBaseSensorData *m_LocInFirstSuspectedDriveSample_;
  float m_estimatedSpeed_;
  long64 m_currLocSampleTime_;
  long64 m_prevLocSampleTime_;
  long64 m_prevSpeedCalcTimeMillis_;
  long64 m_secFromLastSample_;
  long64 m_secFromLastSpeedCalc_;
}

/**
 @brief Constructor
 @param motDetectionModule
 */
- (instancetype)initWithIMotDetectionModule:(id<IMotDetectionModule>)motDetectionModule;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

/**
 @brief store this instance to persistent storage
 */
- (void)store;

- (void)restore;

- (MotInfo *)onLocationReceivedWithLocationBaseSensorData:(LocationBaseSensorData *)locationSensorData;

/**
 @brief Set the current-location, and also calculate an estimated-speed, and record relevant parameters
 @param loc - the new location
 */
- (void)setCurrLocWithLocationBaseSensorData:(LocationBaseSensorData *)loc;

/**
 @brief Estimate the current-speed, based on the current & previous locations, and an assumption that time-diff is AT LEAST 30 seconds
 */
- (float)calculateSpeed;

/**
 @brief if a non-relevant activity is first - filter it and return the next one in line..
 @param activities - the list of probable-activities, sorted by the confidence
 */
- (PlacesActivityType *)filterNonRelevantActivitiesWithJavaUtilList:(ArrayList*)activities;

/**
 @brief Upon receiving activity sensor-data, update internal members, and make a decision if the MOT should change
 @param activityData - the data that activity-sensor sent
 */
- (MotInfo *)onActivityReceivedWithActivitySensorData:(ActivitySensorData *)activityData;

- (boolean)shouldTransitWtoSWithJavaUtilList:(ArrayList*)probableActivities;

- (MotInfo *)assignInitialMotWithJavaUtilList:(ArrayList*)probableActivities
                                     withLong:(long64)timestamp;

- (void)updateShortTermHistoryWithJavaUtilList:(ArrayList*)probableActivities;

- (MotInfo *)onBluetoothDataReceivedWithBluetoothDeviceSensorData:(BluetoothDeviceSensorData *)bluetoothData;

/**
 @brief Update internal MOT-computation parameters, using the current-MOT and the new activities-sample
 @param currentMot - the current MOT state
 @param probableActivities - the list of probable-activities, sorted by the confidence
 */
- (void)updateInternalComputaionParamsWithMot:(Mot *)currentMot
                                 withJavaUtilList:(ArrayList*)probableActivities
                           withPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (void)updateCountWalkOnDriveWithPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (void)updateCountWalkNotDrivingWithPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (void)updateCountStillNotDrivingWithPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (void)updateCountStillOnDriveWithJavaUtilList:(ArrayList*)probableActivities;

- (void)updateActivityRecognitionSampleRateWithPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (boolean)isActivityTypeOverThreshWithPlacesActivityType:(PlacesActivityType *)currActivity
                                                   withInt:(int)activityType
                                                   withInt:(int)thresh;

/**
 @brief Are we currently in "DRIVING" state?
 */
- (boolean)isDriving;

/**
 @brief Assuming current-MOT is DRIVING, use the activities-sample to decide if MOT should transition to one of STAIONARY/WALKING
 @param probableActivities - the data that activity-sensor sent
 @param computedMot - the new MOT (STATIONARY or WALKING) in case MOT transitioned
 */
- (Mot *)getStoppedDrivingMot;

- (void)logWithNSString:(NSString *)str;

/**
 @brief Assuming current-MOT isn't DRIVING, use the activities-sample to decide if MOT should transition to DRIVING check the conditions to enter "drive" from a series of "inVehicle" samples with confidence "100".
 The conditions are on speed & location-update Assumption - Currently we are IN A series of "inVehicle" inputs with confidence 100"
 */
- (boolean)enterDriveFromSeries100;

/**
 @brief Assuming current-MOT isn't DRIVING, use the activities-sample to decide if MOT should transition to DRIVING There are 4 options to enter "drive".
 See documentation down in the implementation
 @param probableActivities - the data that activity-sensor sent
 */
- (boolean)enterDrivingWithJavaUtilList:(ArrayList*)probableActivities
                  withPlacesActivityType:(PlacesActivityType *)mostProbableActivity;

- (boolean)enterDriveConditionsMetWithInt:(int)option
                    withPlacesActivityType:(PlacesActivityType *)mostProbableActivity
                                 withFloat:(float)distMeter;

- (boolean)inSeriesOfVeryHighDriveConfidenceWithJavaUtilList:(ArrayList*)probableActivities
                                                      withInt:(int)kNumOfSamplesInRow
                                                      withInt:(int)kAverageConfidenceThresh;

- (float)computeDistanceMeterWithLocationBaseSensorData:(LocationBaseSensorData *)loc1
                              withLocationBaseSensorData:(LocationBaseSensorData *)loc2;

- (boolean)inDriveSuspectedActivitySeriesWithJavaUtilList:(ArrayList*)probableActivities;

- (boolean)followingInVehicleSamplesWithJavaUtilList:(ArrayList*)probableActivities;

- (void)copyAllFieldsTo:(MotDetectorV2 *)other;

@end

FOUNDATION_EXPORT BOOL MotDetectorV2_initialized;
J2OBJC_STATIC_INIT(MotDetectorV2)

//J2OBJC_FIELD_SETTER(MotDetectorV2, m_motDetectionModule_, id<IMotDetectionModule>)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_currentMot_, MotInfo *)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_previousActivitySamples_, ArrayList*)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_locInFirstSeriesOf100_, LocationBaseSensorData *)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_lastMostProbableActivity_, PlacesActivityType *)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_shortTermActivitiesHistory_, ArrayList*)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_currLoc_, LocationBaseSensorData *)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_prevLoc_, LocationBaseSensorData *)
//J2OBJC_FIELD_SETTER(MotDetectorV2, m_LocInFirstSuspectedDriveSample_, LocationBaseSensorData *)

FOUNDATION_EXPORT NSString *MotDetectorV2_STORE_TIME_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, STORE_TIME_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, MAX_DOWN_TIME, long64)

J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, ACTIVITY_RECOGNITION_RATE_FAST, int)

J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, ACTIVITY_RECOGNITION_RATE_CHANGE_DELTA, int)

FOUNDATION_EXPORT HashMap* MotDetectorV2_state2ThrottleParams_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, state2ThrottleParams_, HashMap*)
//J2OBJC_STATIC_FIELD_SETTER(MotDetectorV2, state2ThrottleParams_, HashMap*)

FOUNDATION_EXPORT HashMap* MotDetectorV2_state2ThrottleParamsInDriving_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, state2ThrottleParamsInDriving_, HashMap*)
//J2OBJC_STATIC_FIELD_SETTER(MotDetectorV2, state2ThrottleParamsInDriving_, HashMap*)

FOUNDATION_EXPORT long64 MotDetectorV2_dummyTime_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectorV2, dummyTime_, long64)
//J2OBJC_STATIC_FIELD_REF_GETTER(MotDetectorV2, dummyTime_, long64)

typedef MotDetectorV2 ComIntelWearablePlatformTimeiqPlacesModulesMotmoduleAlgsMotDetectorV2;

@interface MotDetectorV2_ThrottleParams : NSObject {
 @public
  int m_fastestDetectionRate_;
  int m_slowestDetectionRate_;
  int m_detectionRateIncrement_;
  int m_currentDetectionRate_;
  long64 m_nextTimeToAllowIncreament_;
}

- (instancetype)initWithInt:(int)fastestDetectionRate
                    withInt:(int)slowestDetectionRate
                    withInt:(int)detectionRateIncrement
                   withLong:(long64)now;

- (void)resetDetectionRateToFastestWithLong:(long64)now;

- (boolean)incrementDetectionRateWithLong:(long64)now;

- (void)setNextAllowedIncrementTimeWithLong:(long64)now;

- (void)copyAllFieldsTo:(MotDetectorV2_ThrottleParams *)other;

@end

__attribute__((always_inline)) inline void MotDetectorV2_ThrottleParams_init() {}

#endif // _MotDetectorV2_H_
