//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/places/engine/PlacesEngineImpl.java
//

#ifndef _PlacesEngineImpl_H_
#define _PlacesEngineImpl_H_

@class ClassFactory;
@class ExternalPlacesModule;
#import "NSArray+JavaAPI.h"
#import "JBVector.h"
@class ModuleState;
@class ModuleType;
@class MotDetectionModule;
@class MotInfo;
@class MotType;
@class PlaceDetectionModule;
@class ResultData;
@class SemanticDetectionModule;
@class VisitDetectionModule;
@class VisitInPlaceModule;
@protocol IAuditManager;
@protocol IAuthorizationManager;
@protocol IDaoCommonMethods;
@protocol IExternalPlaceListener;
@protocol IMotChangeListener;
@protocol IVisitEntry;
@protocol IVisitInPlaceListener;
@protocol IVisitListener;
#import "JBHashSet.h"
#import "JBArrayList.h"

#import "JB.h"
#import "IPlaceListener.h"
#import "IPlacesEngine.h"
#import "JBRunnable.h"

/**
 @brief The PlacesEngine provides an API for visits and places detection.
 The engine invokes internal modules for visit detection and places detection. It relies on the SensorsEngine to provide sensors information available on the current platform and registers it's modules to receive the required sensors data such as location, activity, Wifi etc...
 */
@interface PlacesEngineImpl : NSObject < IPlacesEngine > {
 @public
  id<IAuditManager> m_auditManager_;
  id<IAuthorizationManager> m_authMgr_;
  id<IDaoCommonMethods> m_daoCommonMethods_;
  MotDetectionModule *m_motDetection_;
  VisitDetectionModule *m_visitDetection_;
  PlaceDetectionModule *m_placesDetection_;
  SemanticDetectionModule *m_semanticDetection_;
  ExternalPlacesModule *m_externalPlaces_;
  VisitInPlaceModule *m_visitInPlace_;
  Array *m_detectionModules_;
}

- (instancetype)init;

- (instancetype)initWithClassFactory:(ClassFactory *)factory;

- (instancetype)initWithIAuditManager:(id<IAuditManager>)auditManager
            withIAuthorizationManager:(id<IAuthorizationManager>)authMgr
                withIDaoCommonMethods:(id<IDaoCommonMethods>)daoCommonMethods
               withMotDetectionModule:(MotDetectionModule *)motDetection
             withVisitDetectionModule:(VisitDetectionModule *)visitDetection
             withPlaceDetectionModule:(PlaceDetectionModule *)placesDetection
             withExternalPlacesModule:(ExternalPlacesModule *)externalPlaceModule
               withVisitInPlaceModule:(VisitInPlaceModule *)visitInPlaceModule
          withSemanticDetectionModule:(SemanticDetectionModule *)semanticDetectionModule;

/**
 @brief Activates all Modules which require sensor's sampling. such modules are available on init, yet not activated automatically.
 */
- (void)activateAllModules;

/**
 @brief Deactivates all Modules which affects stopping sensor's sampling if the module is the sole consumer of these sensor
 */
- (void)deactivateModule;

/**
 @brief Activate a single Module which require sensor's sampling. such modules are available on init, yet not activated automatically.
 @param moduleType
 */
- (void)activateModuleWithModuleType:(ModuleType *)moduleType;

/**
 @brief Deactivates a single Module which affects stopping sensor's sampling if the module is the sole consumer of these sensor
 @param moduleType
 */
- (void)deactivateModuleWithModuleType:(ModuleType *)moduleType;

- (ModuleState *)getModuleStateWithModuleType:(ModuleType *)moduleType;

/**
 @brief Registration for visit detection.
 Register a listener to be notified on visit detection start/end events.
 @param listener Listener to be called for visit start/end reporting.
 */
- (void)registerVisitListenerWithIVisitListener:(id<IVisitListener>)listener;

/**
 @brief Un-register the visit detection start/end events.
 @param listener Listener to remove from the visits reporting.
 */
- (void)unregisterVisitListenerWithIVisitListener:(id<IVisitListener>)listener;

/**
 @brief Returns the current detected visit in progress, if exists.
 @return Visit entry for the currently detected visit.
 */
- (id<IVisitEntry>)getCurrentVisit;

/**
 @brief Returns all of the detected visits accumulated in the system.
 @return Vector containing all of the detected visits accumulated in the system.
 */
- (Vector *)getAllVisits;

- (void)registerVisitedPlaceListenerWithIVisitInPlaceListener:(id<IVisitInPlaceListener>)listener;

/**
 @brief Unregister a visit-in-place listener
 @param listener Listener to be removed
 */
- (void)unregisterVisitedPlaceListenerWithIVisitInPlaceListener:(id<IVisitInPlaceListener>)listener;

- (ArrayList*)getAllPlaces;

- (Set*)getCurrentVisitsInPlace;

/**
 @brief Registration for MOT ( means of transport ) changes.
 The MOT module is responsible for identifying the user's means of transport such as running, walking, driving, stationary etc. The module will report the detected MOT only when it's differs from the currently detected MOT in the system. For more information refer to MotInfo
 @param listener Listener to be called for MOT change reporting.
 */
- (void)registerMotListenerWithIMotChangeListener:(id<IMotChangeListener>)listener;

/**
 @brief Un-register for MOT changes.
 @param listener Listener to be called for MOT change reporting.
 */
- (void)unregisterMotListenerWithIMotChangeListener:(id<IMotChangeListener>)listener;

/**
 @brief Returns the currently identified MOT state.
 @return detected MOT information
 */
- (ResultData *)getCurrentMOT;

/**
 @brief Invokes a place detection process which is executed in a background thread.
 Place detection takes accumulated sensors data such as position (GPS / fuse-location) and Wi-Fi scans in order to detect user significant places based on clustering algorithms. Once the detection process is completed, any listener registered with #registerPlaceDetectionListener(IPlaceListener) is notified. Detected places are available using the #getAllDetectedPlaces() onDemand - if the logic came from trigger/button (=true) or timer (=false)
 */
- (void)startPlacesDetectionWithBoolean:(boolean)onDemand;

/**
 @brief Invokes a semantic place detection process which is executed in a background thread.
 Semantic place detection attempts to merge detected places with external places thus giving those a semantic meaning. Once the semantic detection process is completed, any listener registered with #registerSemanticPlaceDetectionListener(IPlaceListener) is notified. Semantic detected places are available using the #getAllSemanticDetectedPlaces()
 */
- (void)startSemanticPlacesDetection;

/**
 @brief Returns all of the detected places identified by the PlaceDetection module.
 @return vector containing all of the detected places.
 */
- (Vector *)getAllDetectedPlaces;

/**
 @brief Returns all of the detected places identified by the PlaceDetection module.
 @return vector containing all of the detected places.
 */
- (Set*)getAllSemanticDetectedPlaces;

/**
 @brief Registration for notification of place detection completion.
 Register a listener to be notified once the place detection has completed it's processing.
 @param listener Listener to be called when upon Place Detection processing completion.
 */
- (void)registerSemanticPlaceDetectionListenerWithIPlaceListener:(id<IPlaceListener>)listener;

- (void)unregisterSemanticPlaceDetectionListenerWithIPlaceListener:(id<IPlaceListener>)listener;

/**
 @brief Registration for notification of place detection completion.
 Register a listener to be notified once the place detection has completed it's processing.
 @param listener Listener to be called when upon Place Detection processing completion.
 */
- (void)registerPlaceDetectionListenerWithIPlaceListener:(id<IPlaceListener>)listener;

/**
 @brief Un-register for place detection completion notifications.
 @param listener Listener to be removed
 */
- (void)unregisterPlaceDetectionListenerWithIPlaceListener:(id<IPlaceListener>)listener;

/**
 @param listener
 */
- (void)registerOnExternalPlaceChangeWithIExternalPlaceListener:(id<IExternalPlaceListener>)listener;

/**
 @param listener
 */
- (void)unregisterOnExternalPlaceChangeWithIExternalPlaceListener:(id<IExternalPlaceListener>)listener;

/**
 @return 
 */
- (Vector *)getAllExternalPlaces;

/**
 @return 
 @throws CloneNotSupportedException
 */
- (id)clone;

/**
 @brief Invokes modules persistence mechanism.
 This will allow internal modules to dump all internal data in persistance storage. This method should be called whenever the SDK is stopped and/or terminated in order to preserve on-going data.
 */
- (void)storeModulesMemory;

/**
 @brief Internal modules persistence restore.
 Restores internal module as stored by #storeModulesMemory() This should be called after the application has started in order to restore the engine state.
 */
- (void)restoreModulesMemory;

- (boolean)syncRemoteSlaveDbs;

- (MotType *)convertMotInfoToMotTypeWithMotInfo:(MotInfo *)motInfo;

- (void)copyAllFieldsTo:(PlacesEngineImpl *)other;

@end

FOUNDATION_EXPORT BOOL PlacesEngineImpl_initialized;
J2OBJC_STATIC_INIT(PlacesEngineImpl)

//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_auditManager_, id<IAuditManager>)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_authMgr_, id<IAuthorizationManager>)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_daoCommonMethods_, id<IDaoCommonMethods>)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_motDetection_, MotDetectionModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_visitDetection_, VisitDetectionModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_placesDetection_, PlaceDetectionModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_semanticDetection_, SemanticDetectionModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_externalPlaces_, ExternalPlacesModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_visitInPlace_, VisitInPlaceModule *)
//J2OBJC_FIELD_SETTER(PlacesEngineImpl, m_detectionModules_, Array *)

FOUNDATION_EXPORT NSString *PlacesEngineImpl_TAG_;
J2OBJC_STATIC_FIELD_GETTER(PlacesEngineImpl, TAG_, NSString *)

typedef PlacesEngineImpl ComIntelWearablePlatformTimeiqPlacesEnginePlacesEngineImpl;

@interface PlacesEngineImpl_$1 : NSObject < IPlaceListener > {
 @public
  PlacesEngineImpl *this$0_;
}

- (void)onDetectionFinished;

- (instancetype)initWithPlacesEngineImpl:(PlacesEngineImpl *)outer$;

@end

__attribute__((always_inline)) inline void PlacesEngineImpl_$1_init() {}

//J2OBJC_FIELD_SETTER(PlacesEngineImpl_$1, this$0_, PlacesEngineImpl *)

@interface PlacesEngineImpl_$2 : NSObject < Runnable > {
 @public
  PlacesEngineImpl *this$0_;
  boolean val$onDemand_;
}

- (void)run;

- (instancetype)initWithPlacesEngineImpl:(PlacesEngineImpl *)outer$
                             withBoolean:(boolean)capture$0;

@end

__attribute__((always_inline)) inline void PlacesEngineImpl_$2_init() {}

//J2OBJC_FIELD_SETTER(PlacesEngineImpl_$2, this$0_, PlacesEngineImpl *)

@interface PlacesEngineImpl_$3 : NSObject < Runnable > {
 @public
  PlacesEngineImpl *this$0_;
}

- (void)run;

- (instancetype)initWithPlacesEngineImpl:(PlacesEngineImpl *)outer$;

@end

__attribute__((always_inline)) inline void PlacesEngineImpl_$3_init() {}

//J2OBJC_FIELD_SETTER(PlacesEngineImpl_$3, this$0_, PlacesEngineImpl *)

#endif // _PlacesEngineImpl_H_
