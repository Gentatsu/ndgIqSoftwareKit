//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/triggers/ABaseTriggersManager.java
//

#ifndef _ABaseTriggersManager_H_
#define _ABaseTriggersManager_H_

#import "JBEnumSet.h"
@protocol IBaseTriggersStorage;
@protocol IManagersListener;
@protocol ITriggerInner;
@protocol ITriggerLifeCycleListener;
#import "JBHashSet.h"

#import "JB.h"
#import "IBaseTriggersManager.h"
#import "JBTimerTask.h"

#define ABaseTriggersManager_DELAY_TRIGGER_TIME 10LL

/**
 @brief Created by smoradof on 5/12/2015.
 */
@interface ABaseTriggersManager : NSObject < IBaseTriggersManager > {
 @public
  id<IBaseTriggersStorage> m_triggerStorage_;
  id<IManagersListener> m_triggerListener_;
  id<ITriggerLifeCycleListener> m_triggerLifeCycleListener_;
}

- (instancetype)initWithIBaseTriggersStorage:(id<IBaseTriggersStorage>)triggerStorage;

- (boolean)addTriggerWithITriggerInner:(id<ITriggerInner>)trigger;

/**
 @brief should start listen to the trigger should be called only AFTER the trigger was added to storage !!
 @param trigger
 @return 
 */
- (boolean)onTriggerAddedWithITriggerInner:(id<ITriggerInner>)trigger;

- (void)startWithIManagersListener:(id<IManagersListener>)triggerListener
     withITriggerLifeCycleListener:(id<ITriggerLifeCycleListener>)triggerLifeCycleListener;

- (boolean)removeTriggerWithITriggerInner:(id<ITriggerInner>)trigger;

- (void)removeAllTriggersWithNSString:(NSString *)listenerId;

- (id)getTriggerWithNSString:(NSString *)triggerId;

- (Set*)getAllTriggersWithNSString:(NSString *)listenerId;

- (Set*)getTriggersWithNSString:(NSString *)listenerId
                              withEnumSet:(EnumSet *)triggerStatuses;

- (boolean)setTriggerAsEndedWithITriggerInner:(id<ITriggerInner>)trigger;

/**
 @brief Triggers the trigger associated with the trigger ID (if such trigger exists) if this trigger has not been triggered yet
 @param triggerId the trigger ID to be triggered (if not yet triggered)
 */
- (void)delayTriggerWithNSString:(NSString *)triggerId;

/**
 @brief Returns the triggers that have not been triggered yet and sets them as triggered
 @param triggers the triggers that will be checked and triggered if they are not already triggered
 @return the triggers that have just been set as triggered
 */
- (Set*)setAsTriggeredWithJavaUtilCollection:(Set*)triggers;

- (void)onTriggerSetAsTriggeredWithITriggerInner:(id<ITriggerInner>)trigger;

- (void)onDestroy;

- (void)cancelAllTriggers;

- (void)copyAllFieldsTo:(ABaseTriggersManager *)other;

@end

FOUNDATION_EXPORT BOOL ABaseTriggersManager_initialized;
J2OBJC_STATIC_INIT(ABaseTriggersManager)

//J2OBJC_FIELD_SETTER(ABaseTriggersManager, m_triggerStorage_, id)
//J2OBJC_FIELD_SETTER(ABaseTriggersManager, m_triggerListener_, id<IManagersListener>)
//J2OBJC_FIELD_SETTER(ABaseTriggersManager, m_triggerLifeCycleListener_, id<ITriggerLifeCycleListener>)

J2OBJC_STATIC_FIELD_GETTER(ABaseTriggersManager, DELAY_TRIGGER_TIME, long64)

FOUNDATION_EXPORT id ABaseTriggersManager_m_lock_;
J2OBJC_STATIC_FIELD_GETTER(ABaseTriggersManager, m_lock_, id)

typedef ABaseTriggersManager ComIntelWearablePlatformTimeiqTriggersABaseTriggersManager;

@interface ABaseTriggersManager_$1 : TimerTask {
 @public
  ABaseTriggersManager *this$0_;
  NSString *val$triggerId_;
}

- (void)run;

- (instancetype)initWithABaseTriggersManager:(ABaseTriggersManager *)outer$
                                withNSString:(NSString *)capture$0;

@end

__attribute__((always_inline)) inline void ABaseTriggersManager_$1_init() {}

//J2OBJC_FIELD_SETTER(ABaseTriggersManager_$1, this$0_, ABaseTriggersManager *)
//J2OBJC_FIELD_SETTER(ABaseTriggersManager_$1, val$triggerId_, NSString *)

#endif // _ABaseTriggersManager_H_
