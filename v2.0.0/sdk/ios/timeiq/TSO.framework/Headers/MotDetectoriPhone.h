//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/places/modules/motmodule/algs/MotDetectoriPhone.java
//

#ifndef _MotDetectoriPhone_H_
#define _MotDetectoriPhone_H_

@class ActivitySensorData;
@class BluetoothDeviceSensorData;
@class DeviceConnectionState;
#import "JBNativeArray.h"
#import "NSNumber+JavaAPI.h"
#import "NSNumber+JavaAPI.h"
#import "JBVector.h"
@class LocationBaseSensorData;
@class Mot;
@class MotInfo;
@protocol IMotDetectionModule;
@protocol ITSOLogger;
#import "JBArrayList.h"
#import "JBHashtable.h"
@protocol JavaUtilMap_Entry;

#import "JB.h"
#import "ITSOAlarmListener.h"
#import "MotDetectoriPhoneNaive.h"
#import "JBComparator.h"

#define MotDetectoriPhone_AR_MOVING_WINDOW_SIZE 90000
#define MotDetectoriPhone_CONFIDENCE_POWER 2.0
#define MotDetectoriPhone_CONFIDENCE_TOLERANCE 0.7
#define MotDetectoriPhone_DEBUG NO
#define MotDetectoriPhone_LOC_DRIVE_BOOST 1.6
#define MotDetectoriPhone_LOC_DRIVE_CONFIDENCE_THRESHOLD 0.75
#define MotDetectoriPhone_LOC_STATIONARY_BOOST 0.7
#define MotDetectoriPhone_LOC_STAT_CONFIDENCE_THRESHOLD 0.95
#define MotDetectoriPhone_TIME_WITHOUT_DRIVING_PRED_MINS 10
#define MotDetectoriPhone_ZERO_DELAY 0LL

/**
 @brief MOT Detector for iPhone including Running Average for activity, simple handling of BT and location
 */
@interface MotDetectoriPhone : MotDetectoriPhoneNaive < ITSOAlarmListener > {
 @public
  HashMap* m_movingAverages_;
  id<IMotDetectionModule> m_motDetectionModule_;
  Vector *m_ARinputQ_;
  Vector *m_locationInputList_;
  Mot *m_currMot_;
  Long *m_tickUntil_;
  HashMap* m_lastActivityData_;
  long64 m_lastActivityAverageCalcTime_;
  long64 m_lastDriveTime_;
  DeviceConnectionState *m_lastBlueToothState_;
  long64 m_lastBlueToothStateTime_;
  long64 LOCATION_SAMPLE_RELEVANCE_TIME_MINS_;
  double m_lastLocationConfidence_;
  long64 m_lastLocationConfidenceCalcTime_;
}

/**
 @brief constructor
 @param motDetectionModule listener for asynchronous MOT changes
 */
- (instancetype)initWithIMotDetectionModule:(id<IMotDetectionModule>)motDetectionModule;

/**
 @brief create initial sensor activity data - Activity-Unknown since the beginning of time
 */
- (HashMap*)createInitialActivityData;

/**
 @brief callback method for AR updates stores new data in a queue and calls an asynchronous process to handle it
 @return null
 */
- (MotInfo *)onActivityReceivedWithActivitySensorData:(ActivitySensorData *)activitySensorData;

/**
 @brief callback method for BT updates stores new data and calls an asynchronous process to handle it
 @return null
 */
- (MotInfo *)onBluetoothDataReceivedWithBluetoothDeviceSensorData:(BluetoothDeviceSensorData *)bluetoothData;

/**
 @brief callback method for BT updates stores new data and calls an asynchronous process to handle it
 @return null
 */
- (MotInfo *)onLocationReceivedWithLocationBaseSensorData:(LocationBaseSensorData *)locationData;

/**
 @brief entry point for async processing does one of: 1) new data processing 2) add padding processing
 */
- (void)onAlarmWithNSString:(NSString *)action
               withNSString:(NSString *)id_
               withNSString:(NSString *)data;

/**
 @brief Predicts the MOT based on all available inputs: AR, BT, Location Returns result to all listeners
 */
- (MotInfo *)predictMotBasedOnAllSources;

- (void)updateListenersWithMotInfo:(MotInfo *)predictedMot;

/**
 @brief Returns true if the confidence of the location same is good enough to use.
 */
- (boolean)isLocationSampleValidWithLocationBaseSensorData:(LocationBaseSensorData *)locationData;

/**
 @brief Extracts needed attributes from current and previous location samples for improving MOT detection
 */
- (void)calculateLocationFeatures;

/**
 @brief predicts current MOT based on current-time and last available activity data received from the OS
 @return MotInfo with the maximum moving average and current time
 */
- (MotInfo *)getPredictionFromMovingAverage;

/**
 @brief predicts current MOT based on a map of confidences per class
 @return MotInfo with the maximum confidence and current time
 */
- (MotInfo *)getPredictionFromConfidencesWithJavaUtilMap:(HashMap*)confidences;

- (double)getCurrentMovingAverageConfidenceWithMot:(Mot *)mot;

/**
 @brief update moving average values with new AR data for each activity sensor data, insert it to moving average with weight being the time frame until the next activity sensor data was received
 */
- (void)updateActivityMovingAverageWithNewData;

/**
 @brief update moving average values with padding duplicate last activity data to extend until now
 */
- (void)updateActivityMovingAverageWithPadding;

/**
 @brief add last activity to moving averages to extend until new time stamp update m_lastActivityAverageCalcTime to the new time stamp
 */
- (void)addLastActivityUntilTimestampWithLong:(long64)newTimeStamp;

/**
 @brief extract activity sensor data to Mot representation performing a few data manipulations
 @param activitySensorData activity data in sensor format
 @return activity data in application format
 */
+ (HashMap*)getMotDataFromActivityWithActivitySensorData:(ActivitySensorData *)activitySensorData;

/**
 @brief Returns true if the AR algorithm predicted driving in the last timeInMins minutes.
 @param timeInMins time to look for latest drive
 */
- (boolean)didARPredictDrivingLatelyWithInt:(int)timeInMins;

/**
 @brief Sorts a map based on values, in ascending order
 @param unsortedMap the map to sort
 @return A List containing the original map's entries (key, value), sorted by values from big to small
 */
+ (ArrayList*)sortByComparatorWithJavaUtilMap:(HashMap*)unsortedMap;

- (HashMap*)getMovingAverages;

- (id<IMotDetectionModule>)getMotDetectionModule;

- (Vector *)getARinputQ;

- (Vector *)getLocationInputList;

- (Mot *)getCurrMot;

- (Long *)getTickUntil;

- (HashMap*)getLastActivityData;

- (long64)getLastActivityAverageCalcTime;

- (long64)getLastBlueToothStateTime;

- (DeviceConnectionState *)getLastBlueToothState;

- (long64)getLastDriveTime;

- (double)getLastLocationConfidence;

- (void)copyAllFieldsTo:(MotDetectoriPhone *)other;

@end

FOUNDATION_EXPORT BOOL MotDetectoriPhone_initialized;
J2OBJC_STATIC_INIT(MotDetectoriPhone)

//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_movingAverages_, HashMap*)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_motDetectionModule_, id<IMotDetectionModule>)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_ARinputQ_, Vector *)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_locationInputList_, Vector *)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_currMot_, Mot *)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_tickUntil_, Long *)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_lastActivityData_, HashMap*)
//J2OBJC_FIELD_SETTER(MotDetectoriPhone, m_lastBlueToothState_, DeviceConnectionState *)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, AR_MOVING_WINDOW_SIZE, int)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_ALARM_ID_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ALARM_ID_, NSString *)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_ALARM_NEW_AR_DATA_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ALARM_NEW_AR_DATA_, NSString *)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_ALARM_PADDING_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ALARM_PADDING_, NSString *)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_ALARM_BT_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ALARM_BT_, NSString *)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_ALARM_NEW_LOC_DATA_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ALARM_NEW_LOC_DATA_, NSString *)

FOUNDATION_EXPORT long64 MotDetectoriPhone_TICK_DELAY_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, TICK_DELAY_, long64)
//J2OBJC_STATIC_FIELD_REF_GETTER(MotDetectoriPhone, TICK_DELAY_, long64)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, ZERO_DELAY, long64)

FOUNDATION_EXPORT JBDouble *MotDetectoriPhone_STATIONARY_FACTOR_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, STATIONARY_FACTOR_, JBDouble *)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, CONFIDENCE_POWER, double)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, CONFIDENCE_TOLERANCE, double)

FOUNDATION_EXPORT id<ITSOLogger> MotDetectoriPhone_LOGGER_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, LOGGER_, id<ITSOLogger>)
//J2OBJC_STATIC_FIELD_SETTER(MotDetectoriPhone, LOGGER_, id<ITSOLogger>)

FOUNDATION_EXPORT NSString *MotDetectoriPhone_TAG_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, TAG_, NSString *)
//J2OBJC_STATIC_FIELD_SETTER(MotDetectoriPhone, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, TIME_WITHOUT_DRIVING_PRED_MINS, int)

FOUNDATION_EXPORT IOSIntArray *MotDetectoriPhone_GOOD_LOCATION_ACCURACIES_;
J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, GOOD_LOCATION_ACCURACIES_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, LOC_STAT_CONFIDENCE_THRESHOLD, double)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, LOC_DRIVE_CONFIDENCE_THRESHOLD, double)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, LOC_STATIONARY_BOOST, double)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, LOC_DRIVE_BOOST, double)

J2OBJC_STATIC_FIELD_GETTER(MotDetectoriPhone, DEBUG, boolean)

typedef MotDetectoriPhone ComIntelWearablePlatformTimeiqPlacesModulesMotmoduleAlgsMotDetectoriPhone;

@interface MotDetectoriPhone_$1 : NSObject < IComparator > {
}

- (int)compareWithId:(id<JavaUtilMap_Entry>)o1
               withId:(id<JavaUtilMap_Entry>)o2;

- (instancetype)init;

@end

__attribute__((always_inline)) inline void MotDetectoriPhone_$1_init() {}

#endif // _MotDetectoriPhone_H_
