//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/api/triggers/place/PlaceTrigger.java
//

#ifndef _PlaceTrigger_H_
#define _PlaceTrigger_H_

@class PlaceID;
@class PlaceTriggerType;
@class PlaceTrigger_PlaceTriggerBuilder;
@class TriggerStatus;

#import "JB.h"
#import "BaseTrigger.h"

/**
 @brief This class represents a trigger based on pre-defined actions for a specific location
 */
@interface PlaceTrigger : BaseTrigger {
 @public
  PlaceID *m_placeId_;
  PlaceTriggerType *m_placeTriggerType_;
}

/**
 @brief Create the PlaceTrigger using a builder
 @param builder the builder that has the input parameters for the trigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithPlaceTrigger_PlaceTriggerBuilder:(PlaceTrigger_PlaceTriggerBuilder *)builder;

/**
 @brief Create the PlaceTrigger using parameters (the builder should be used in most cases)
 @param id the unique ID of the trigger
 @param tag tag that can be used for extra data in the trigger (can be null)
 @param placeId the place ID of the place that will be associated with this trigger
 @param placeTriggerType the place trigger type that will determine the state in which the trigger will trigger
 @param status the status of the trigger
 @param triggeredTime the time that the trigger was triggered, or -1 if not triggered yet
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithNSString:(NSString *)id_
                    withNSString:(NSString *)tag
                     withPlaceID:(PlaceID *)placeId
        withPlaceTriggerType:(PlaceTriggerType *)placeTriggerType
           withTriggerStatus:(TriggerStatus *)status
                        withLong:(long64)triggeredTime;

/**
 @return the place ID of the place that will be associated with this trigger
 */
- (PlaceID *)getPlaceId;

/**
 @return the place trigger type that determines the state in which the trigger will trigger
 */
- (PlaceTriggerType *)getPlaceTriggerType;

- (boolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)copyAllFieldsTo:(PlaceTrigger *)other;

@end

__attribute__((always_inline)) inline void PlaceTrigger_init() {}

//J2OBJC_FIELD_SETTER(PlaceTrigger, m_placeId_, PlaceID *)
//J2OBJC_FIELD_SETTER(PlaceTrigger, m_placeTriggerType_, PlaceTriggerType *)

typedef PlaceTrigger ComIntelWearablePlatformTimeiqApiTriggersPlacePlaceTrigger;

/**
 @brief Builder class that creates a PlaceTrigger
 */
@interface PlaceTrigger_PlaceTriggerBuilder : BaseTrigger_BaseTriggerBuilder {
 @public
  PlaceTriggerType *placeTriggerType_;
  PlaceID *placeId_;
}

/**
 @brief Create a builder for creating the PlaceTrigger
 @param placeTriggerType the place trigger type that will determine the state in which the trigger will trigger
 @param placeId the place ID of the place that will be associated with this trigger
 */
- (instancetype)initWithPlaceTriggerType:(PlaceTriggerType *)placeTriggerType
                                 withPlaceID:(PlaceID *)placeId;

/**
 @brief Create the PlaceTrigger
 @return the PlaceTrigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (PlaceTrigger *)build;

- (void)copyAllFieldsTo:(PlaceTrigger_PlaceTriggerBuilder *)other;

@end

__attribute__((always_inline)) inline void PlaceTrigger_PlaceTriggerBuilder_init() {}

//J2OBJC_FIELD_SETTER(PlaceTrigger_PlaceTriggerBuilder, placeTriggerType_, PlaceTriggerType *)
//J2OBJC_FIELD_SETTER(PlaceTrigger_PlaceTriggerBuilder, placeId_, PlaceID *)

#endif // _PlaceTrigger_H_
