//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/places/modules/visitsmodule/wifisim/WifiSimilarityAlg.java
//

#ifndef _WifiSimilarityAlg_H_
#define _WifiSimilarityAlg_H_

@class Similarity;
@class WifiScan;
@class WifiScansWindow;
@class WifiSignature;
#import "JBArrayList.h"
#import "JBHashtable.h"
#import "JBHashSet.h"

#import "JB.h"

@interface WifiSimilarityAlg : NSObject {
 @public
  WifiScansWindow *swindow_;
}

/**
 @brief Adding new scan into the scan window.
 <br> If previous WIFI found in already in the scan window, the new scan is reported as Strong similarity. This rough estimation can be fine tuned to grades of similarity in the future.
 @param wifiScan
 @return StrongSimilarity or NoSimilarity . Do not confuse with the Similarity returned by #updateSimilarSignature }
 */
- (Similarity *)addScanWithWifiScan:(WifiScan *)wifiScan;

/**
 @brief Setup first time signature.
 This one time initialization step is required to prepare the signature to be compare to new scans. The signature is setup with the current scan window
 @param signature
 @return False - nothing to update, window scan is empty. In this case the signature is not ready to be updated or to produce similarities. Therefore, this method, initialSignatureUpdate should be called again and again until the return value is true. <br> True - propery updated
 */
- (boolean)initialSignatureUpdateWithWifiSignature:(WifiSignature *)signature OBJC_METHOD_FAMILY_NONE;

/**
 @brief <ol> <li>Calculates the similarity between the the scan window to signature.
 <li>Updates signature </ol>
 @param signature
 @return Similarity
 */
- (Similarity *)updateSimilarSignatureWithWifiSignature:(WifiSignature *)signature;

/**
 @brief AP are filtered out if the RSS is less than VisitDetector.TOLERANCE.
 @param bssidList
 @param averageLEvels
 @return Filtered AP
 */
- (HashMap*)filterByLevelWithJavaUtilList:(ArrayList*)bssidList
                                withJavaUtilList:(ArrayList*)averageLEvels;

- (HashMap*)getMatchingSignatureApsWithWifiSignature:(WifiSignature *)signature
                                            withJavaUtilMap:(HashMap*)knownAps;

- (boolean)isSignatureMatchWithSigStrengthWithWifiSignature:(WifiSignature *)signature
                                             withJavaUtilMap:(HashMap*)filteredScan;

- (boolean)isSignatureMatchWithoutSigStrengthWithWifiSignature:(WifiSignature *)signature
                                                withJavaUtilSet:(Set*)bssidSet;

- (void)updateSignatureWithWifiSignature:(WifiSignature *)signature
                         withJavaUtilMap:(HashMap*)bssidLevels;

- (void)setSignatureWithWifiSignature:(WifiSignature *)signature
                      withJavaUtilMap:(HashMap*)bssidLevels;

- (void)removeUnusedSources;

- (void)addNewSourcesWithJavaUtilList:(ArrayList*)newSources;

- (void)resetWindowWithWifiScan:(WifiScan *)wifiScan;

- (ArrayList*)getSameSourcesWithWifiScan:(WifiScan *)wifiScan;

- (ArrayList*)getNewSourcesWithWifiScan:(WifiScan *)wifiScan;

- (void)createFrameFromScanWithWifiScan:(WifiScan *)wifiScan;

- (instancetype)init;

- (void)copyAllFieldsTo:(WifiSimilarityAlg *)other;

@end

__attribute__((always_inline)) inline void WifiSimilarityAlg_init() {}

//J2OBJC_FIELD_SETTER(WifiSimilarityAlg, swindow_, WifiScansWindow *)

FOUNDATION_EXPORT int WifiSimilarityAlg_count_;
J2OBJC_STATIC_FIELD_GETTER(WifiSimilarityAlg, count_, int)
//J2OBJC_STATIC_FIELD_REF_GETTER(WifiSimilarityAlg, count_, int)

typedef WifiSimilarityAlg ComIntelWearablePlatformTimeiqPlacesModulesVisitsmoduleWifisimWifiSimilarityAlg;

#endif // _WifiSimilarityAlg_H_
