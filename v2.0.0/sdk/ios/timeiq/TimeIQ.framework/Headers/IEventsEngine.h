//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/api/events/IEventsEngine.java
//

#ifndef _IEventsEngine_H_
#define _IEventsEngine_H_

@class Result;
@class ResultData;
@class TSOEventType;
@class UserActionType;
@protocol IEvent;
#import "JBArrayList.h"

#import "JB.h"

/**
 @brief Use this interface to add, delete, get, or update events
 */
@protocol IEventsEngine < NSObject >

/**
 @brief Adds an event
 @param event - The event to be added. The event is created using the event builders (see for example BeEvent documentation).
 @return Result - Holds the ResultCode Enum that specifies whether the action succeeded or failed with a corresponding error code.
 */
- (Result *)addEventWithIEvent:(id<IEvent>)event;

/**
 @brief Gets a particular event by specifying the event id
 @param eventId - The event id
 @return ResultData<IEvent> - The event and result code (ResultCode)
 */
- (ResultData *)getEventWithNSString:(NSString *)eventId;

/**
 @brief Deletes a particular event by specifying the event id.
 @param eventId - The id of the event to be deleted
 @return Result - Holds the ResultCode Enum that specifies whether the action succeeded or failed with a corresponding error code.
 */
- (Result *)deleteEventWithNSString:(NSString *)eventId;

/**
 @brief Deletes a recurring event by specifying the event ID and indicating whether to delete all recurrences.
 @param eventId - The id of the event to be deleted
 @param applyToAllInstances - deletes all recurrences
 @return Result - Holds the ResultCode Enum that specifies whether the action succeeded or failed with a corresponding error code.
 */
- (Result *)deleteEventWithNSString:(NSString *)eventId
                        withBoolean:(boolean)applyToAllInstances;

/**
 @brief Updates a specific event.
 @param event - The event with all updated details
 @return Result - Holds the ResultCode Enum that specifies whether the action succeeded or failed with a corresponding error code.
 */
- (Result *)updateEventWithIEvent:(id<IEvent>)event;

/**
 @brief Updates a recurring event and indicate whether to update all recurrences
 @param event - The event with all updated details
 @param applyToAllInstances - the update applies to all instances
 @return Result - Holds the ResultCode Enum that specifies whether the action succeeded or failed with a corresponding error code.
 */
- (Result *)updateEventWithIEvent:(id<IEvent>)event
                      withBoolean:(boolean)applyToAllInstances;

/**
 @brief Gets the upcoming events for the specified event types.
 In fact, these are the events the user can currently expect to receive TTL notifications for.
 @param eventType - The event type (i.e. TSOEventType.BE, TSOEventType.CALENDAR, etc.)
 @return ResultData<TSOEventsResponse> - Holds the list of required IEvents and a result code
 */
- (ResultData *)getCurrentEventsWithTSOEventType:(TSOEventType *)eventType;

/**
 @brief Gets the upcoming events for the each of the specified event types in the list.
 In fact, these are the events the user can currently expect to receive TTL notifications for.
 @param eventTypes - The types of events you want to get
 @return ResultData<TSOEventsResponse> - The events list and result code
 */
- (ResultData *)getCurrentEventsWithJavaUtilList:(ArrayList*)eventTypes;

/**
 @brief Gets events within a specified time frame based on event type.
 @param eventType - The event type
 @param startTimeFrame - The beginning of the time frame in which the events will be retrieved
 @param endTimeFrame - The end of the time frame in which the events will be retrieved
 @return ResultData<TSOEventsResponse> - The list of events that occurred within the specified time frame and result code (ResultCode)
 */
- (ResultData *)getEventsByDatesWithTSOEventType:(TSOEventType *)eventType
                                            withLong:(long64)startTimeFrame
                                            withLong:(long64)endTimeFrame;

/**
 @brief Get events in a time frame according to event type and calendar ids.
 @param calendarsId - A list of calendar ids the user wishes to retrieve events from. These calendar ids should be retrieved from the device the calendars are located on.
 @param eventType - The type of events you want to get
 @param startTimeFrame - The start time frame to get events
 @param endTimeFrame - The end time frame to get events
 @return ResultData<TSOEventsResponse> - The events list and result code
 */
- (ResultData *)getEventsByDatesWithJavaUtilList:(ArrayList*)calendarsId
                            withTSOEventType:(TSOEventType *)eventType
                                        withLong:(long64)startTimeFrame
                                        withLong:(long64)endTimeFrame;

/**
 @brief After receiving a message regarding the event (either TTL or General Reminder), the user has the ability to act upon the message.
 By using this function - the SDK user is able to receive the applicable actions the SDK supports (see UserActionType). The user actions may vary between events so the event id is supplied to receive the most appropriate actions.
 @param eventId - The id of the event to get user actions for.
 @return ResultData<Set<UserActionType>> - User actions and result code
 */
- (ResultData *)getUserActionOptionsWithNSString:(NSString *)eventId;

/**
 @brief After receiving a message regarding the event (either TTL or General Reminder), the user has the ability to act upon the message.
 This is the way the SDK user reports the chosen user action for this event.
 @param eventId - The id of the event to set the user action for
 @param userAction - The action the user chose to do with the event notification
 @return Result - Result code
 */
- (Result *)chosenUserActionWithNSString:(NSString *)eventId
                  withUserActionType:(UserActionType *)userAction;

/**
 @brief After receiving a message regarding the event (either TTL or General Reminder), the user has the ability to act upon the message.
 This is the way the SDK user reports the chosen user action for this event. If the user chooses the TIME_SNOOZE action, then use the delayInMillis parameter to specify the snooze duration.
 @param eventId - The id of the event to set the user action for
 @param userAction - The action the user chose to do with the event notification
 @param delayInMillis - If the user chose the SNOOZE option to the event notification, set here the snooze time.
 @return Result - Result code
 */
- (Result *)chosenUserActionWithNSString:(NSString *)eventId
                  withUserActionType:(UserActionType *)userAction
                                withLong:(long64)delayInMillis;

@end

__attribute__((always_inline)) inline void IEventsEngine_init() {}

#define ComIntelWearablePlatformTimeiqApiEventsIEventsEngine IEventsEngine

#endif // _IEventsEngine_H_
