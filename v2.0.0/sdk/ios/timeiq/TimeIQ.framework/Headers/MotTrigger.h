//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: //com/intel/wearable/platform/timeiq/api/triggers/mot/MotTrigger.java
//

#ifndef _MotTrigger_H_
#define _MotTrigger_H_

@class MotTransition;
@class MotTrigger_MotTriggerBuilder;
@class MotType;
@class TriggerStatus;

#import "JB.h"
#import "BaseTrigger.h"

/**
 @brief This class represents a trigger based on pre-defined MOT conditions
 */
@interface MotTrigger : BaseTrigger {
 @public
  MotType *m_motType_;
  MotTransition *m_motTransition_;
}

/**
 @brief Create the MotTrigger using a builder
 @param builder the builder that has the input parameters for the trigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithMotTrigger_MotTriggerBuilder:(MotTrigger_MotTriggerBuilder *)builder;

/**
 @brief Create the MotTrigger using parameters (the builder should be used in most cases)
 @param id the unique ID of the trigger
 @param tag tag that can be used for extra data in the trigger (can be null)
 @param motType the MOT type that will determine the state in which the trigger will trigger
 @param motTransition the MOT transition type that will determine the state in which the trigger will trigger
 @param status the status of the trigger
 @param triggeredTime the time that the trigger was triggered, or -1 if not triggered yet
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (instancetype)initWithNSString:(NSString *)id_
                    withNSString:(NSString *)tag
                 withMotType:(MotType *)motType
           withMotTransition:(MotTransition *)motTransition
           withTriggerStatus:(TriggerStatus *)status
                        withLong:(long64)triggeredTime;

/**
 @return the MOT type that determines the state in which the trigger will trigger
 */
- (MotType *)getMotType;

/**
 @return the MOT transition type that determines the state in which the trigger will trigger
 */
- (MotTransition *)getMotTransition;

- (boolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)copyAllFieldsTo:(MotTrigger *)other;

@end

__attribute__((always_inline)) inline void MotTrigger_init() {}

//J2OBJC_FIELD_SETTER(MotTrigger, m_motType_, MotType *)
//J2OBJC_FIELD_SETTER(MotTrigger, m_motTransition_, MotTransition *)

typedef MotTrigger ComIntelWearablePlatformTimeiqApiTriggersMotMotTrigger;

/**
 @brief Builder class that creates a MotTrigger
 */
@interface MotTrigger_MotTriggerBuilder : BaseTrigger_BaseTriggerBuilder {
 @public
  MotType *motType_;
  MotTransition *motTransition_;
}

/**
 @brief Create a builder for creating the MotTrigger
 @param motType the MOT type that will determine the state in which the trigger will trigger
 @param motTransition the MOT transition (when the MOT starts, ends or during the MOT is active) that will determine the state in which the trigger will trigger (see MotTransition for more information)
 */
- (instancetype)initWithMotType:(MotType *)motType
              withMotTransition:(MotTransition *)motTransition;

/**
 @brief Create the MotTrigger
 @return the MotTrigger
 @throws TriggerBuildException will be thrown when input is missing or invalid (see eTriggerBuildExceptionType for reasons)
 */
- (MotTrigger *)build;

- (void)copyAllFieldsTo:(MotTrigger_MotTriggerBuilder *)other;

@end

__attribute__((always_inline)) inline void MotTrigger_MotTriggerBuilder_init() {}

//J2OBJC_FIELD_SETTER(MotTrigger_MotTriggerBuilder, motType_, MotType *)
//J2OBJC_FIELD_SETTER(MotTrigger_MotTriggerBuilder, motTransition_, MotTransition *)

#endif // _MotTrigger_H_
