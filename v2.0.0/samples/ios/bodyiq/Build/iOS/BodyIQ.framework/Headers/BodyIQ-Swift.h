// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import IQCore;
@import Dispatch;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol WearableControllerType;
@class NSError;
@class TimeSeriesObservation;
@class WearableToken;
@class NSDate;
@class TimeSeries;


/// SDK entry-point for BodyIQ functionality.
SWIFT_CLASS("_TtC6BodyIQ6BodyIQ")
@interface BodyIQ : NSObject

/// Subscribes to body activities so the application can display them in realtime. If listener is passed, it may be referenced by removeActivityListenerForWearableController.
///
/// \param wearableController The WearableControllerType associated with your wearable device.
///
/// \param failure A completion handler closure that takes an NSError object as an argument and returns no value. The handler is executed asynchronously.
///
/// \param success A completion handler closure that takes no arguments and returns no value. The handler is executed asynchronously.
///
/// \param listener An NSObject optional listener.
///
/// \param callback A BodyIQActivityListenerCallback.
+ (void)addActivityListenerForWearableController:(id <WearableControllerType> __nonnull)wearableController failure:(void (^ __nonnull)(NSError * __nonnull))failure success:(void (^ __nonnull)(void))success listener:(NSObject * __nullable)listener callback:(void (^ __nonnull)(TimeSeriesObservation * __nonnull, NSString * __nonnull, NSString * __nullable))callback;
+ (void)getCurrentActivityReport:(id <WearableControllerType> __nonnull)wearableController completion:(void (^ __nonnull)(WearableBodyActivity * __nonnull))completion failure:(void (^ __nonnull)(NSError * __nonnull))failure;
+ (void)setOngoingActivityGranularity:(id <WearableControllerType> __nonnull)wearableController granularity:(NSInteger)granularity;

/// <ul><li><ul><li>Causes BodyIQ to write to the datastore any unread data stored on the Wearable Device and to continue recording</li><li>any new data until endObservingWearableController is called</li><li>Will be invoked automatically if addActivityListenerForWearableController is called before this method.</li><li>It is an error to call this function on an unconnected wearable controller.</li><li>Should not be called while currently observing the wearable or already subscribed to wearable events.</li><li>Thread safety: May be called from any thread.</li><li>No guarantees are made regarding dispatch queue or thread for success or failure blocks. Move to desired dispatch queue if needed.</li></ul><ul><li>parameter wearableController: A WearableControllerType to observe.</li><li>parameter failure: A completion handler closure that takes an NSError object as an argument and returns no value. The handler is executed asynchronously.</li><li>parameter success: A completion handler closure that takes no arguments and returns no value. The handler is executed asynchronously.</li></ul></li></ul>
+ (void)beginObservingWearableController:(id <WearableControllerType> __nonnull)wearableController failure:(void (^ __nonnull)(NSError * __nonnull))failure success:(void (^ __nonnull)(void))success;

/// Initiates BodyIQ to remove all activity listeners for the wearableController. Suspends recording incomming events to the datastore. - parameter wearableController: A WearableControllerType optional. If the object passed in as the WearableControllerType parameter is nil, then BodyIQ will suspend observations for all wearableControllers currently observed.
+ (void)endObservingWearableController:(id <WearableControllerType> __nullable)wearableController;

/// Removes one or all activity listeners from one or all wearable controllers.
///
/// \param wearableController A WearableControllerType optional. If the object passed in as the WearableControllerType parameter is nil, all wearable controllers are targeted.
///
/// \param listener An NSObject optional listener. If listener is nil, all listeners for targeted wearable controllers are removed.
+ (void)removeActivityListenerForWearableController:(id <WearableControllerType> __nullable)wearableController listener:(NSObject * __nullable)listener;

/// Generates a WearableControllerType for an identified wearable device. Returns the same WearableController object if repeatedly called with the same token. Note that this is an alternate interface Core for obtaining the WearableController object. Do not call this if you have already obtained a controller from Core using a similar method.
///
/// \param token WearableToken for the device with which you wish to associate a WearableController. These can be acquired through a WearableScannerType.
///
/// \returns  A WearableControllerType for an identified wearable device.
+ (id <WearableControllerType> __nonnull)wearableControllerForToken:(WearableToken * __nonnull)wearableToken;

/// <ul><li>Queries the local data and constructs the time series</li><li>for a given date range.</li></ul>
/// \param startDate An NSDate object, specifying the desired start time for the time series.
///
/// \param endDate An NSDate object, specifying the desired end time for the time series.
///
/// \param completionQueue An optional dispatch_queue_t, a C typedef. If this parameter is not passed in and specified by name, dispatch_get_main_queue() will be used as the default parameter.
///
/// \param completion A completion handler closure that takes an NSError optional as its first argument and a TimeSeries array optional as its second argument. The closure returns no value and is executed asynchronously.
///
/// \returns  No value is returned.
+ (void)timeSeriesFromDate:(NSDate * __nonnull)startDate endDate:(NSDate * __nonnull)endDate completionQueue:(dispatch_queue_t __nonnull)completionQueue completion:(void (^ __nonnull)(NSError * __nullable, NSArray<TimeSeries *> * __nullable))completion;
@end



/// Superclass for timeseries values
SWIFT_CLASS("_TtC6BodyIQ15TimeSeriesValue")
@interface TimeSeriesValue : NSObject
- (nonnull instancetype)initWithSessionID:(NSString * __nullable)sessionID OBJC_DESIGNATED_INITIALIZER;

/// Session ID.
@property (nonatomic, readonly, copy) NSString * __nullable sessionID;
@end


SWIFT_CLASS("_TtC6BodyIQ30BodyIQHeartRateTimeSeriesValue")
@interface BodyIQHeartRateTimeSeriesValue : TimeSeriesValue
- (nonnull instancetype)initWithSessionID:(NSString * __nonnull)sessionID beatsPerMinute:(double)beatsPerMinute OBJC_DESIGNATED_INITIALIZER;

/// Heart rate in beats per minute.
@property (nonatomic, readonly) double beatsPerMinute;
@end


SWIFT_CLASS("_TtC6BodyIQ28BodyIQWalkingTimeSeriesValue")
@interface BodyIQWalkingTimeSeriesValue : TimeSeriesValue
- (nonnull instancetype)initWithSessionID:(NSString * __nullable)sessionID speed_mps:(double)speed_mps distance_meters:(double)distance_meters duration_sec:(double)duration_sec steps:(NSInteger)steps caloriesBurned:(double)caloriesBurned OBJC_DESIGNATED_INITIALIZER;

/// Speed of movement in meters per second.
@property (nonatomic, readonly) double speed;

/// Meters traveled.
@property (nonatomic, readonly) double distance;

/// Duration of movement in seconds.
@property (nonatomic, readonly) double duration;

/// Calories burned.
@property (nonatomic, readonly) double calories;

/// Number of steps taken.
@property (nonatomic, readonly) NSInteger stepCount;
@end


@interface BodyIQWalkingTimeSeriesValue (SWIFT_EXTENSION(BodyIQ))
- (nullable instancetype)initWithJSONDictionary:(NSDictionary<NSString *, id> * __nonnull)JSONDictionary;
@end


@interface NSDate (SWIFT_EXTENSION(BodyIQ))
+ (NSString * __nonnull)rfc3339FromDate:(NSDate * __nonnull)date;
+ (NSDate * __nullable)fromRFC3339:(NSString * __nonnull)rfc3339;
@end

@class TimeSeriesInfo;


/// Represents a series of activity observations generated by a wearble device.
SWIFT_CLASS("_TtC6BodyIQ10TimeSeries")
@interface TimeSeries : NSObject
- (nonnull instancetype)initWithInfo:(TimeSeriesInfo * __nonnull)info observations:(NSArray<TimeSeriesObservation *> * __nonnull)observations OBJC_DESIGNATED_INITIALIZER;

/// Information record property.
@property (nonatomic, readonly, strong) TimeSeriesInfo * __nonnull info;

/// <ul><li>Property storing an array of activity observations generated by the wearable device.</li></ul>
@property (nonatomic, readonly, copy) NSArray<TimeSeriesObservation *> * __nonnull observations;
@end


@interface TimeSeries (SWIFT_EXTENSION(BodyIQ))
- (nullable instancetype)initWithJSONDictionary:(NSDictionary<NSString *, id> * __nonnull)JSONDictionary;
@end


@interface TimeSeries (SWIFT_EXTENSION(BodyIQ))
@end



/// <ul><li>Provides wearable device and companion device identifiers.</li></ul>
SWIFT_CLASS("_TtC6BodyIQ14TimeSeriesInfo")
@interface TimeSeriesInfo : NSObject
- (nonnull instancetype)initWithDeviceID:(NSString * __nonnull)deviceID companionID:(NSString * __nonnull)companionID OBJC_DESIGNATED_INITIALIZER;

/// Wearable device ID property.
@property (nonatomic, readonly, copy) NSString * __nonnull deviceID;

/// Companion device ID property.
@property (nonatomic, readonly, copy) NSString * __nonnull companionID;
@end


@interface TimeSeriesInfo (SWIFT_EXTENSION(BodyIQ))
- (nullable instancetype)initWithJSONDictionary:(NSDictionary<NSString *, id> * __nonnull)JSONDictionary;
@end



/// Location coordinates for time series data.
SWIFT_CLASS("_TtC6BodyIQ16TimeSeriesLatLon")
@interface TimeSeriesLatLon : NSObject
- (nonnull instancetype)initWithLat:(double)lat lon:(double)lon OBJC_DESIGNATED_INITIALIZER;

/// Latitude.
@property (nonatomic, readonly) double lat;

/// Longitude.
@property (nonatomic, readonly) double lon;
@end


@interface TimeSeriesLatLon (SWIFT_EXTENSION(BodyIQ))
- (nullable instancetype)initWithJSONDictionary:(NSDictionary<NSString *, id> * __nonnull)JSONDictionary;
@end

@class TimeSeriesObservationDetail;

SWIFT_CLASS("_TtC6BodyIQ21TimeSeriesObservation")
@interface TimeSeriesObservation : NSObject
- (nonnull instancetype)initWithTimestamp:(NSDate * __nonnull)timestamp location:(TimeSeriesLatLon * __nullable)location source:(NSString * __nonnull)source eventType:(NSString * __nonnull)eventType priority:(NSString * __nullable)priority value:(TimeSeriesValue * __nonnull)value details:(NSArray<TimeSeriesObservationDetail *> * __nullable)details OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) NSDate * __nonnull timestamp;
@property (nonatomic, readonly, strong) TimeSeriesLatLon * __nullable location;
@property (nonatomic, readonly, copy) NSString * __nonnull source;
@property (nonatomic, readonly, copy) NSString * __nonnull eventType;

/// Priority level.
@property (nonatomic, readonly, copy) NSString * __nullable priority;

/// TimeSeriesValue property.
@property (nonatomic, readonly, strong) TimeSeriesValue * __nonnull value;
@end


@interface TimeSeriesObservation (SWIFT_EXTENSION(BodyIQ))
- (id __nullable)toJSONAndReturnError:(NSError * __nullable * __null_unspecified)error;
- (nullable instancetype)initWithJSONDictionary:(NSDictionary<NSString *, id> * __nonnull)JSONDictionary;
@end



/// <ul><li>Encapsulates the time offset and step count</li></ul>
SWIFT_CLASS("_TtC6BodyIQ27TimeSeriesObservationDetail")
@interface TimeSeriesObservationDetail : NSObject
@end



@interface WearableBodyActivity (SWIFT_EXTENSION(BodyIQ))
@end

#pragma clang diagnostic pop
