# Firestarter board, it has an CLTAP controlling the cores (but not the same as
# in Quark), a QRK 3.5 core and an ARC core.

# scan_chain
jtag newtap firestarter arc-em -irlen 4  -irmask 0x0f  -expected-id   0x200044b1  -disable
jtag newtap firestarter cltap  -irlen 8  -irmask 0xff  -expected-id   0x0e765013  -enable

# targets
target create arc-em.cpu arc32       -endian little -chain-position firestarter.arc-em

# enable the work area below (which is in sram) to perform the "test_mem_access" tests
# quark.cpu configure -work-area-phys 0xa8000000 -work-area-virt 0xa8000000 -work-area-size 0x4000

# openocd puts tap at front of chain not end of chain
# to enable the arc core we need to set bits [3:2] to 0x1
proc firestarter_arc_tapenable {} {
	echo "Enabling arc core tap"
	set val [ eval { irscan firestarter.cltap 0x11 ; drscan firestarter.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( ( 0x$val & 0xff3 ) | 0x04 )] ]
	irscan firestarter.cltap 0x11
	drscan firestarter.cltap 12 $val
	runtest 10
}

# to disable the arc core we need to set bits [3:2] to 0x0
proc firestarter_arc_tapdisable {} {
	echo "Disabling arc core tap"
	set val [ eval { irscan firestarter.cltap 0x11 ; drscan firestarter.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( 0x$val & 0xff3 ) ] ]
	irscan firestarter.cltap 0x11
	drscan firestarter.cltap 12 $val
	runtest 10
}

proc firestarter_setup {} {
    jtag tapenable firestarter.arc-em
}

jtag configure firestarter.arc-em -event tap-enable "firestarter_arc_tapenable"
jtag configure firestarter.arc-em -event tap-disable "firestarter_arc_tapdisable"
jtag configure firestarter.cltap -event setup "firestarter_setup"

arc-em.cpu configure -event reset-assert-pre { mww 0xb0800570 0x2 }

# utility functions to delete flash
proc del_flash0 {} { mww 0xB0100018 0x80 ; sleep 2000 ; mdw 0xB0100014 }
proc del_flash1 {} { mww 0xB0200018 0x80 ; sleep 2000 ; mdw 0xB0200014 }
# utility function to delete ROM, flash0 and flash1
proc mass_erase {} { mww 0xB0100018 0xC0 ; mww 0xB0200018 0xC0 ; sleep 2000 ; mdw 0xB0100014 ; mdw 0xB0200014 }

# utility function to set SoC clock to 32MHz Si
proc clk32M { {jtag_khz 1000} } {
	# slow speed to make sure we can write mem
	adapter_khz 3
	# ARC halt
	irscan firestarter.cltap 0x69 ; drscan firestarter.cltap 4 0x1
	# set the SoC clock to the 32 MHz Silicon one
	mww 0xB0800008 0x2
	mww 0xB0800038 0x7
	mww 0xB0800038 0x87
	# set the JTAG clock to the desired one
	adapter_khz $jtag_khz
	# clear halt flag and reset the SoC
	irscan firestarter.cltap 0x69 ; drscan firestarter.cltap 4 0x0
	reset halt
}

# default frequency but this can be adjusted at runtime
adapter_khz 1000

reset_config trst_only
